01_今日课程内容介绍
	1、回顾mybatis自定义和环境搭建+完善自定义Mybatis的注解开发
	2、Mybatis基于代理Dao的CRUD操作								重点内容
	3、CRUD中可能遇到的问题：参数的传递以及返回值的封装
	4、介绍Mybatis基于传统dao方式的使用（自己编写dao的实现类）	了解的内容
	5、mybatis主配置文件中的常用配置(SqlMapConfig.xml)
		1、properties标签
		2、typeAliases标签				---解释Integer的写法
		3、mappers标签的子标签：package
02_回顾自定义mybatis的流程分析
	1、第一步：SqlSessionFactoryBuilder接收SqlMapConfig.xml文件流,构建出SqlSessionFactory对象
	2、第二步：SqlSessionFactory读取SqlMapConfig.xml中连接数据库和mapper映射信息。
		用来生产出真正操作数据库的SqlSession对象
	3、第三步：SqlSession对象有两大作用：
		1、生成接口代理对象
		2、定义通用增删改查方法
	4、第四步：在SqlSession中创建代理对象，在代理对象中调用对应的CRUD操作
	5、第五步：我们要对返回的数据库集进行封装，变成java对象返回给调用者
03_基于注解的自定义再分析
	
04_回顾Mybatis的环境搭建-实现查询所有功能
	第一步：创建 maven 工程
	第二步：导入坐标
	第三步：编写必要代码（实体类和持久层接口）
	第四步：编写 SqlMapConfig.xml
	第五步：编写映射配置文件
	第六步：编写测试类
	
05_Mybatis的CRUD-保存操作
	1、在dao接口中新添加一个方法
		public void saveUser(User user);
	2、在映射配置文件中添加sql语句
		<!--配置插入数据-->
		<insert id="saveUser" parameterType="cn.jianjie.domain.User">
			INSERT into USER (username,address,sex,birthday) VALUES (#{username},#{address},#{sex},#{birthday});
		</insert>
	3、把重复代码抽象出来
		private InputStream is;
		private SqlSession sqlSession;
		private UserDao userDao;
		@Before
		public void init() throws Exception{
			//1、加载MyBatis主配置文件
			is = Resources.getResourceAsStream("SqlMapConfig.xml");
			//2、使用配置文件创建SqlSessionFactory工厂
			SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();
			SqlSessionFactory sessionFactory = builder.build(is);
			//3、使用工厂创建SqlSession对象
			sqlSession = sessionFactory.openSession();
			//4、使用SqlSession对象创建dao层的代理对象
			userDao = sqlSession.getMapper(UserDao.class);
		}
		@After
		public void destroy() throws Exception{
			sqlSession.commit();
			//6、释放资源
			sqlSession.close();
			is.close();
		}
	4、注意事项:
		1、映射配置文件中SQL语句的占位符为#{}
			parameterType参数属性尽量写全属性名
		1、操作数据库数据注意要提交
			sqlSession.commit();
06_Mybatis的CRUD-修改和删除操作
	1、基本步骤与插入的步骤差不多
	2、注意事项：
		1、如果参数类型时基本数据类型而且只有一个的话，#{这里面随便写}
07_Mybatis的CRUD-查询一个和模糊查询
	1、基本步骤与插入的步骤差不多
	2、注意事项：
		1、模糊查询的时候，SQL语句中没办法加上%，需要在调用时自己手动添加
08_Mybatis的CRUD-查询返回聚合函数的结果和占位符分析
	1、可以使用聚合函数来查询一行或一列的数据
		select count(id) from user;
	
	2、在模糊查询中还可以使用字符串拼接的方式查询
		<select id="findByName" parameterType="string" resultType="com.itheima.domain.User">
			select * from user where username like '%${value}%'
		</select>
		
	3、#{}和${}的区别
		1、#{}表示一个占位符号
			通过#{}可以实现 preparedStatement 向占位符中设置值，自动进行 java 类型和 jdbc 类型转换，
			#{}可以有效防止 sql 注入。 #{}可以接收简单类型值或 pojo 属性值。 如果 parameterType 传输单个简单类
			型值，#{}括号中可以是 value 或其它名称。
		2、${}表示拼接 sql 串
			通过${}可以将 parameterType 传入的内容拼接在 sql 中且不进行 jdbc 类型转换， ${}可以接收简
			单类型值或 pojo 属性值，如果 parameterType 传输单个简单类型值，${}括号中只能是 value。
09_Mybatis的CRUD-保存操作的细节-获取插入数据的自增id的值
	<!-- 配置保存时获取插入的id(因为id自增不用设置，所以需要获取) --> 
	<insert id="saveUser" parameterType="cn.jianjie.domain.User">
		<selectKey  keyColumn="id" keyProperty="id" resultType="int" order="AFTER">
			select last_insert_id();
		</selectKey>
        INSERT into USER (username,address,sex,birthday) VALUES (#{username},#{address},#{sex},#{birthday});
    </insert>
	
10_Mybatis中参数的深入-使用实体类的包装对象作为查询条件
11_Mybatis中的返回值深入-调整实体类属性解决增和改方法的报错
12_Mybatis中的返回值深入-解决实体类属性和数据库列名不对应的两种方式
13_Mybatis中编写dao实现类的使用方式-查询列表
14_Mybatis中编写dao实现类的使用-保存操作
15_Mybatis中编写dao实现类的使用-修改删除等其他操作
16_Mybatis中使用Dao实现类的执行过程分析-查询方法1
16_Mybatis中使用Dao实现类的执行过程分析-查询方法2
17_Mybatis中使用Dao实现类的执行过程分析-增删改方法
18_Mybatis中使用代理Dao的执行过程分析
19_properties标签的使用及细节
20_typeAliases标签和package标签
