01_mybatis课程介绍
	MyBatis框架共四天
	1、第一天：MyBatis入门
		1、MyBatis的概述
		2、MyBatis的环境搭建
		3、MyBatis入门案例
		4、自定义MyBatis框架(主要目的是为了让大家了解MyBatis中的执行细节)
	2、第二天：MyBatis基本使用
		1、MyBatis的单表crud操作
		2、MyBatis的参数和返回值
		3、MyBatis的dao编写
		4、MyBatis的配置细节(几个标签的使用)
	3、第三天：MyBatis的深入和多表
		1、MyBatis的连接池
		2、MyBatis的事务控制及设计的方法
		3、MyBatis的多表查询(一对多和多对多)
	4、第四天：MyBatis的缓存和注解开发
		1、MyBatis中的加载时机(查询的时机)
		2、MyBatis的一级缓存和二级缓存
		3、MyBatis的注解开发(单表的CRUD操作、多表查询)
02_三层架构和ssm框架的对应关系
	1、什么是框架？
		1、框架其实就是某种应用的半成品，它是我们软件开发中的一套解决方案，不同的框架解决的是不同的问题。
		2、使用框架的好处：
			框架封装了很多的细节，使开发者可以使用极简的方式实现功能。大大提高开发效率。
	2、三层架构
		1、表现层web包：
			是用于展示数据的
		2、业务层service包：
			是处理业务需求
		3、持久层dao包：
			是和数据库交互的
			
		4、对应关系：
			1、Spring MVC框架是一种解决web层问题的框架
			2、MyBatis框架是为了解决数据持久层dao问题的框架
			3、Spring是为了解决整合J2EE技术问题的框架
03_jdbc操作数据库的问题分析
	1、持久层技术解决方案
		1、JDBC技术：
			1、Connection
			2、PreparedStatement
			3、ResultSet
		2、Spring的JdbcTemplate：
			1、Spring中对jdbc的简单封装
		3、Apache的DBUtils：
			1、它和Spring的JdbcTemplate很像，也是对Jdbc的简单封装
		4、注意：以上这些都不是框架
			1、JDBC是规范
			2、Spring的JdbcTemplate和Apache的DBUtils都只是工具类
04_mybatis概述
	1、mybatis是一个持久层框架，用java编写的。它封装了jdbc操作的很多细节，
		使开发者只需要关注sql语句本身，而无需关注注册驱动，创建连接等繁杂过程。
		它使用了ORM思想实现了结果集的封装。
	2、ORM思想：Object Relational Mappging 对象关系映射
		简单的说：
			就是把数据库表和实体类及实体类的属性对应起来，让我们可以操作实体类就实现操作数据库表。
	3、今天我们需要做到：
		实体类中的属性和数据库表的字段名称保持一致。
05_mybatis环境搭建-前期准备
	1、创建maven项目,注意不要勾选模板
	2、创建数据库并导入数据
	2、编辑pom.xml文件加载jar包
		1、<packaging>jar</packaging>
		2、导入mybatis、mysql、log4j、junit的jar包
			<dependencies>
				<dependency>
					<groupId>org.mybatis</groupId>
					<artifactId>mybatis</artifactId>
					<version>3.5.2</version>
				</dependency>
				<dependency>
					<groupId>mysql</groupId>
					<artifactId>mysql-connector-java</artifactId>
					<version>5.1.30</version>
				</dependency>

				<dependency>
					<groupId>log4j</groupId>
					<artifactId>log4j</artifactId>
					<version>1.2.17</version>
				</dependency>

				<dependency>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
					<version>4.12</version>
				</dependency>
			</dependencies>
06_mybatis的环境搭建
	1、mybatis的环境搭建
		1、第一步：创建maven工程并导入坐标
		2、第二步：创建实体类和dao的接口
			1、创建实体类注意名称必须与数据库的表和属性一致
			2、创建dao接口
		3、第三步：创建Mybatis的主配置文件(在resources包中创建SqlMapConfig.xml文件)
			1、添加主配置文件约束
				<?xml version="1.0" encoding="UTF-8"?>
				<!DOCTYPE configuration  
				  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"  
				  "http://mybatis.org/dtd/mybatis-3-config.dtd">
			2、添加配置标签(default必须与id值相同、resource资源下必须与这个路径一致)
				<!--MyBatis的主配置文件-->
				<configuration>
					<!--配置环境-->
					<environments default="mysql">
						<!--配置mysql的环境-->
						<environment id="mysql">
							<!--配置事务的类型-->
							<transactionManager type="JDBC"></transactionManager>
							<!--配置数据源(连接池)-->
							<dataSource type="POOLED">
								<!--配置数据库的四种基本信息-->
								<property name="driver" value="com.mysql.jdbc.Driver"/>
								<property name="url" value="jdbc:mysql://localhost:3306/mybatisDa"/>
								<property name="username" value="root"/>
								<property name="password" value="root"/>
							</dataSource>
						</environment>
					</environments>
					<!--指定映射配置文件的位置，映射配置文件指的是每一个dao独立的配置文件-->
					<mappers>
						<mapper resource="cn/jianjie/dao/UserDao.xml"/>
					</mappers>
				</configuration>
					
		4、第四步：创建映射配置文件(一张表一个映射配置文件)
			1、添加映射配置文件约束(创建UserDao.xml)
				<?xml version="1.0" encoding="UTF-8"?>
				<!DOCTYPE mapper
						PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
						
			2、添加映射关系标签
				(namespace的值必须与实体类的路径一致、selcct标签的id是dao接口中的方法名标签内容时sql语句)
				 <mapper namespace="cn.jianjie.dao.UserDao">
					<!--配置查询所有-->
					<select id="findAll">
						SELECT * from USER ;
					</select>
				</mapper>
07_环境搭建的注意事项
	1、第一个：创建IUserDao.xml 和 IUserDao.java时名称是为了和我们之前的知识保持一致。
		在Mybatis中它把持久层的操作接口名称和映射文件也叫做：Mapper
		所以：IUserDao 和 IUserMapper是一样的
	2、第二个：在idea中创建目录的时候，它和包是不一样的
		包在创建时：com.itheima.dao它是三级结构
		目录在创建时：com.itheima.dao是一级目录
	3、第三个：mybatis的映射配置文件位置必须和dao接口的包结构相同(映射配置xml文件与dao接口的包结构相同)
	4、第四个：映射配置文件的mapper标签namespace属性的取值必须是dao接口的全限定类名(namespace属性=dao接口的全类名)
	5、第五个：映射配置文件的操作配置（select），id属性的取值必须是dao接口的方法名(id=dao接口的方法名)

	注意：当我们遵从了第三，四，五点之后，我们在开发中就无须再写dao的实现类。
08_mybatis的入门
	(xml配置方式需要配置映射表、注解方式不需要配置映射表、实现类方式需要配置映射表)
	1、思路步骤：
		1、第一步：读取配置文件
			InputStream is = Resources.getResourceAsStream("SqlMapConfig.xml");
		2、第二步：创建SqlSessionFactory工厂
			SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder();
			SqlSessionFactory sessionFactory = builder.build(is);
		3、第三步：使用工厂创建SqlSession对象
			SqlSession sqlSession = sessionFactory.openSession();
		4、第四步：使用SqlSession对象创建Dao接口的代理对象
			 UserDao userDao = sqlSession.getMapper(UserDao.class);
		5、第五步：使用代理对象执行dao中的方法
			List<User> userList = userDao.findAll();
			for (User user : userList) {
				System.out.println(user);
			}
		6、第六步：释放资源
			sqlSession.close();
			is.close();
		
	2、注意事项：
		1、不要忘记在映射配置中告知mybatis要封装到哪个实体类中(resultType)
		2、配置的方式：指定实体类的全限定类名
	
	
09_mybatis注解开发和编写dao实现类的方式
	0、前期准备：
		1、创建maven工程，并把jar导入
		2、导入主配置文件、log4j的配置文件。
		3、创建对应的dao接口和JavaBean类
		4、编写测试MyBatis的类
	1、mybatis基于注解的入门案例：
		1、把IUserDao.xml移除，在dao接口的方法上使用@Select注解，并且指定SQL语句
		2、同时需要在SqlMapConfig.xml中的mapper配置时，使用class属性指定dao接口的全限定类名。
	2、明确：
		1、我们在实际开发中，都是越简便越好，所以都是采用不写dao实现类的方式。
		2、不管使用XML还是注解配置。
		3、但是Mybatis它是支持写dao实现类的。
10_mybatis入门案例中的设计模式分析
	1、加载配置文件不可以使用简单的绝对路径和相对路径加载。有两种方式可行。
		第一个：使用类加载器，它只能读取类路径的配置文件
		第二个：使用ServletContext对象的getRealPath()
	2、创建工厂时，MyBatis使用了构建者模式：
		构建者模式：把对象的创建细节隐藏，使用者直接调用方法就可以拿到对象。
	3、生产SqlSession对象，使用了工厂模式
		优势：解耦(降低类之间的依赖关系)
	4、创建dao接口实现类使用了代理模式
		优势：在不修改源代码的基础上对已有方法进行增强
11_自定义Mybatis的分析-执行查询所有分析
	1、mybatis在使用代理dao的方式实现增删改查时做什么事呢？(在增强方法时做的事)
		只有两件事：
			第一：创建代理对象
			第二：在代理对象中调用selectList
	2、解析MyBatis执行的全步骤
		1、配置文件
			1、主配置文件(连接信息)
			2、映射配置文件(映射信息)
				1、执行的SQL语句
				2、封装结果的实体类全限定类名
				把这两个信息组合起来定义为一个对象(Mapper对象)
			要想让SelectList()方法执行，我们需要把Mapper对象封装为map集合
			key									value
			String								Mapper对象类型
			cn.jianjie.dao.UserDao.findAll		Mapper对象(string sql\String domainClassPath)
		2、读取配置文件：用到的技术就是解析XML的技术(此处用的是dom4j解析xml技术)
		3、selectList()方法解析
			1、根据配置文件的信息创建Connection对象(注册驱动、获取连接)
			2、获取预处理对象PrepareStatement
				此时需要SQL语句(在map集合中根据key来获取SQL语句)：conn.prepareStatement(sql)
			3、执行查询
				ResultSet resultSet = prepareStatement.executeQuery();
			4、遍历结果集用于封装(在map集合中根据key来获取实体类的全限定类名)
				1、遍历结果集，根据实体类的全限定类名获取实体类对象。
				2、使用反射的方式根据名称获取每一个属性，并把值赋予进去
			5、返回List集合
			
12_自定义Mybatis的分析-创建代理对象的分析
	UserDao userDao = sqlSession.getMapper(UserDao.class);
	创建代理对象的方法分析:getMapper(UserDao.class)
	根据dao接口的字节码创建dao的代理对象
	public <T> getMapper(Class <T> daoInterfaceClass){
		/**
		*	类加载器：
			代理对象要实现的接口：
			如何代理：它就是增强的方法，需要我们提供
				此处是一个InvocationHandler的接口，我们需要写一个该接口的实现类
				在实现类中调用selectList()方法
		*/
		Proxy.newProxyInstance(类加载器,代理对象要实现的接口字节码数组,如何代理);
	}
	
	
	
	1、需要关注的点
		1、如何创建代理对象、以及使用这些设计模式带来的优势
		2、里面调用的组合关系
	2、不需要关注的点
		1、JDBC的那一套
		2、解析XML的技术
13_自定义mybatis的编码-根据测试类中缺少的创建接口和类
	1、自定义mybatis能通过入门案例看到类
		1、class Resources
		2、class SqlSessionFactoryBuilder
		3、interface SqlSessionFactory
		4、interface SqlSession
	2、自定义MyBatis的准备工作
		1、创建maven工程并导入jar包。把MyBatis的jar包删除
		2、把src目录下的所有源代码拷贝进来
	3、根据测试类中缺少的创建接口和类
		1、class Resources使用类加载器读取配置文件的类
			创建cn.jianjie.mybatis.io.Resources类
			public static InputStream getResourceAsStream(String filePath){
				return Resources.class.getClassLoader().getResourceAsStream(filePath);
			}
		2、class SqlSessionFactoryBuilder
			//根据参数的字节输入流来构建一个SqlSessionFactory工厂
			创建cn.jianjie.mybatis.sqlsession.SqlSessionFactoryBuilder类
			public SqlSessionFactory build(InputStream inputStream){
				return null;
			}
		3、interface SqlSessionFactory
			//用于打开一个新的SqlSession对象的接口(使用工厂来创建SqlSession对象)
			创建cn.jianjie.mybatis.sqlsession.SqlSessionFactory接口
			public interface SqlSessionFactory {
				public SqlSession openSession();
			}
		4、interface SqlSession
			自定义MyBatis中和数据库交互的核心类，它里面可以创建dao接口的代理对象
			创建cn.jianjie.mybatis.sqlsession.SqlSession接口
			public interface SqlSession {
				/**
				 * 根据参数创建一个代理对象
				 * @param daoInterfaceClass dao的接口字节码
				 * @param <T>
				 * @return
				 */
				public <T> T getMapper(Class<T> daoInterfaceClass);
				/**
				 * 释放资源
				 */
				public void close();
			}
			
	
14_自定义mybatis的编码-解析XML的工具类介绍
	1、创建cn.jianjie.mybatis.utils包。并导入别提供的解析XML工具类XMLConfigBuilder
	2、在pom.xml中导入dom4j的坐标(dom4j、jaxen)
	3、创建封装SQL语句和结果类型的全限定类名的Map集合
		1、cn.jianjie.mybatis.cfg.Mapper类位置
		2、属性：
			1、String queryString
			2、String resultType
		3、并创建getAndset方法
	4、创建configuration类(自定义MyBatis的配置类)
		1、设置driver、url、username、password、mappers属性并创建getAndset方法
			Map Mapper = new HashMap<>()
		2、cn.jianjie.mybatis.cfg.configuration
		3、public Map<String,mapper> getMapper(){return mappers;}
		4、public void setMapper(Map<String,mapper> mappers){
			this.mappers.putAll(mappers);
			}
	5、注释掉注解的解析方式
	6、删掉无用的导入包
	
15_自定义Mybatis的编码-创建两个默认实现类并分析类之间的关系
	1、工厂构建类：SqlSessionFactoryBuilder
		public class SqlSessionFactoryBuilder {
			/**
			 * 根据参数的字节输入流来构建一个SqlSessionFactory工厂
			 * @param inputStream
			 * @return SqlSessionFactory对象
			 */
			public SqlSessionFactory build(InputStream inputStream){
				Configuration cfg = XMLConfigBuilder.loadConfiguration(inputStream);
				return new DefaultsSqlSessionFactory(cfg);
			}
		}


	2、创建SqlSessionFactory接口的实现类
		1、cn.jianjie.mybatis.sqlsession.defaults.DefaultsSqlSessionFactory
		2、源代码：
			public class DefaultsSqlSessionFactory implements SqlSessionFactory {
				private Configuration cfg;
				public DefaultsSqlSessionFactory(Configuration cfg) {
					this.cfg = cfg;
				}
				/**
				 * 用于创建一个新的操作数据库对象
				 * @return
				 */
				public SqlSession openSession() {
					return new DefaultsSqlSession(cfg);
				}
			}
	3、创建SqlSession接口的实现类
		1、cn.jianjie.mybatis.sqlsession.defaults.DefaultsSqlSession
		2、源代码：
			private Configuration cfg;
			private Connection conn;
			public DefaultsSqlSession(Configuration cfg) {
				this.cfg = cfg;
				conn = DataSourceUtil.getConnection(cfg);
			}
			/**
			 * 用于创建代理对象
			 * @param daoInterfaceClass dao的接口字节码
			 * @param <T>
			 * @return
			 */
			public <T> T getMapper(Class<T> daoInterfaceClass) {
				return (T) Proxy.newProxyInstance(daoInterfaceClass.getClassLoader(),
						new Class[]{daoInterfaceClass},new MapperProxy(cfg.getMappers(),conn));
			}
			/**
			 * 释放资源
			 */
			public void close() {
				if(conn != null){
					try {
						conn.close();
					} catch (SQLException e) {
						e.printStackTrace();
					}
				}
			}
16_自定义Mybatis的编码-实现基于XML的查询所有操作
	1、创建获取连接的工具类
		public class DataSourceUtil {
			/**
			 * 用于获取一个连接
			 * @param cfg
			 * @return
			 */
			public static Connection getConnection(Configuration cfg) {
				try{
					Class.forName(cfg.getDriver());
					return DriverManager.getConnection(cfg.getUrl(),cfg.getUsername(),cfg.getPassword());
				}catch (Exception e){
					throw new RuntimeException(e);
				}
			}
		}
	2、导入Executor的工具类(负责执行SQL语句，并且封装结果集)
		里面主要是selectList(Mapper mapper, Connection conn)方法
	3、创建代理对象增强方法的实现类(增强方法就是调用了selectList方法)
		public class MapperProxy implements InvocationHandler {
			private Map<String,Mapper> mappers;
			private Connection conn;
			public MapperProxy(Map<String,Mapper> mappers, Connection conn) {
				this.mappers = mappers;
				this.conn = conn;
			}
			/**
			 * 用于对方法的增强，我们的增强其实就是调用SelectList方法
			 * @param proxy
			 * @param method
			 * @param args
			 * @return
			 * @throws Throwable
			 */
			public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
				//1、获取方法名
				String methodName = method.getName();
				//2、获取方法所在类的名称
				String className = method.getDeclaringClass().getName();
				//3、组合key=ClassName.methodName
				String key = className + "." + methodName;
				//4、获取mappers中的Mapper对象
				Mapper mapper = mappers.get(key);
				//5、判断Mapper对象是否为空
				if(mapper == null){
					throw new IllegalArgumentException("传入的参数有误");
				}
				//6、调用工具类执行查询所有
				return new Executor().selectList(mapper,conn);
			}
		}
17_自定义Mybatis的编码-实现基于注解配置的查询所有
	1、去映射配置文件中修改resource为class
		<mapper class="cn.jianjie.dao.UserDao"/>
	2、创建@Select注解类
		@Retention(RetentionPolicy.RUNTIME)
		@Target(ElementType.METHOD)
		public @interface Select {
			/**
			 * 配置SQL语句的
			 * @return
			 */
			String value();
		}
	3、去XMLConfigBuilder工具类中去除注解的注释