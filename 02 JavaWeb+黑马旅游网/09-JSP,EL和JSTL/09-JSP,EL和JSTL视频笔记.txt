第1节 JSP基础语法
	1、今日内容
		1. JSP:
			1. 指令
			2. 注释
			3. 内置对象
		2. MVC开发模式
		3. EL表达式
		4. JSTL标签
		5. 三层架构
	2、JSP_指令_概述
		1、作用：用于配置JSP页面，导入资源文件
		2、格式：
			<%@ 指令名称 属性名1=属性值1 属性名2=属性值2 ... %>
		3、分类：
			1. page		： 配置JSP页面的
			2. include	： 页面包含的。导入页面的资源文件
			3. taglib	： 导入资源
	3、JSP_指令_page指令
		1、page：配置JSP页面的
			1、contentType：等同于response.setContentType()
				1. 设置响应体的mime类型以及字符集
				2. 设置当前jsp页面的编码（只能是高级的IDE才能生效，如果使用低级工具，则需要设置pageEncoding属性设置当前页面的字符集）
			2、import：导包
			3、errorPage：当前页面发生异常后，会自动跳转到指定的错误页面
			4、isErrorPage：标识当前也是是否是错误页面。
				1、true：是，可以使用内置对象exception
				2、false：否。默认值。不可以使用内置对象exception
	4、JSP_指令_include&taglib指令
		1、include：页面包含的。导入页面的资源文件(可以抽象出页面结构相似的代码，然后使用这个指令导入这些代码)
			<%@include file="top.jsp"%>
		2、taglib：导入资源(导入标签库)
			1、<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
			2、prefix：前缀，自定义的
	5、JSP_注释
		1. html注释：
			<!-- -->:只能注释html代码片段
		2. jsp注释：推荐使用
			<%-- --%>：可以注释所有
	6、JSP_内置对象
		1、在jsp页面中不需要创建，直接使用的对象
		一共有9个：
				变量名					真实类型						作用
			1、pageContext				PageContext					当前页面共享数据，还可以获取其他八个内置对象
			2、request					HttpServletRequest			一次请求访问的多个资源(转发)
			3、session					HttpSession					一次会话的多个请求间
			4、application				ServletContext				所有用户间共享数据
			5、response					HttpServletResponse			响应对象
			6、page						Object						当前页面(Servlet)的对象  this
			7、out						JspWriter					输出对象，数据输出到页面上
			8、config					ServletConfig				Servlet的配置对象
			9、exception				Throwable					异常对象
第2节 MVC
	1、MVC_jsp演变历史
		1. 早期只有servlet，只能使用response输出标签数据，非常麻烦
		2. 后来又jsp，简化了Servlet的开发，如果过度使用jsp，在jsp中即写大量的java代码，有写html表，造成难于维护，难于分工协作
		3. 再后来，java的web开发，借鉴mvc开发模式，使得程序的设计更加合理性
	2、MVC_详解
		 MVC：
		1. M：Model，模型。JavaBean
			完成具体的业务操作，如：查询数据库，封装对象
		2. V：View，视图。JSP
			展示数据
		3. C：Controller，控制器。Servlet
			1、获取用户的输入
			2、调用模型
			3、将数据交给视图进行展示
		优缺点：
			1. 优点：
				1. 耦合性低，方便维护，可以利于分工协作
				2. 重用性高
			2. 缺点：
				1. 使得项目架构变得复杂，对开发人员要求高
第3节 EL介绍和运算符
	1、EL_概述
		1. 概念：Expression Language 表达式语言
		2. 作用：替换和简化jsp页面中java代码的编写
		3. 语法：${表达式}
		4. 注意：
			* jsp默认支持el表达式的。如果要忽略el表达式
				1. 设置jsp中page指令中：isELIgnored="true" 忽略当前jsp页面中所有的el表达式
				2. \${表达式} ：忽略当前这个el表达式
	2、EL_运算符
		1. 运算：
			1、运算符：
				1. 算数运算符： + - * /(div) %(mod)
				2. 比较运算符： > < >= <= == !=
				3. 逻辑运算符： &&(and) ||(or) !(not)
				4. 空运算符： empty
					1、功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0
						${empty list}:判断字符串、集合、数组对象是否为null或者长度为0
						${not empty str}:表示判断字符串、集合、数组对象是否不为null 并且 长度>0
第4节 EL获取域中存储的数据
	1、EL_获取域中存储的值
		1. el表达式只能从域对象中获取值
		2. 语法：
			1. ${域名称.键名}：从指定域中获取指定键的值
				1、域名称：
					1. pageScope		--> pageContext
					2. requestScope 	--> request
					3. sessionScope 	--> session
					4. applicationScope --> application（ServletContext）
				1、举例：在request域中存储了name=张三
				3、获取：${requestScope.name}

			2. ${键名}：表示依次从最小的域中查找是否有该键对应的值，直到找到为止。
	2、EL_获取域中存储的值_对象值
		获取对象的值
			1. 对象：${域名称.键名.属性名}
				属性名本质上是去调用对象的getter方法(在JavaBean中没有成员变量的方法称为逻辑视图)
				
				
			2、本质是通过对象的属性来获取注意属性和成员是不一样的
				setter方法或getter方法,去掉set或get,再将剩余部分首字母小写
				setName->Name->name
	3、EL_获取域中存储的值_List集合&Map集合值
		获取List集合、Map集合的值
			1、List集合：${域名称.键名[索引]}
			2、Map集合：
				1、${域名称.键名.key名称}
				2、${域名称.键名["key名称"]}
	4、EL_empty运算符&隐式对象pageContext
		1、空运算符:empty
			1、功能：用于判断字符串、集合、数组对象是否为null或者长度是否为0
				${empty list}:判断字符串、集合、数组对象是否为null或者长度为0
				${not empty str}:表示判断字符串、集合、数组对象是否不为null 并且 长度>0
		2、隐式对象：
			1、el表达式中有11个隐式对象
			2、pageContext：
				1、获取jsp其他八个内置对象
				2、${pageContext.request.contextPath}：动态获取虚拟目录
				
				
				
				
				
			3、11个EL表达式的隐式对象
				pageContext				对应于JSP页面中的pageContext对象（注意：取的是pageContext对象。）
				pageScope				代表page域中用于保存属性的Map对象
				requestScope			代表request域中用于保存属性的Map对象
				sessionScope			代表session域中用于保存属性的Map对象
				applicationScope		代表application域中用于保存属性的Map对象
				param					表示一个保存了所有请求参数的Map对象
				paramValues				表示一个保存了所有请求参数的Map对象，它对于某个请求参数，返回的是一个string[]
				header					表示一个保存了所有http请求头字段的Map对象
				headerValues			同上，返回string[]数组。注意：如果头里面有“-” ，例Accept-Encoding，则要headerValues[“Accept-Encoding”]
				cookie					表示一个保存了所有cookie的Map对象
				initParam				表示一个保存了所有web应用初始化参数的map对象
第5节 JSTL常用标签
	1、JSTL_概述
		1. 概念：Java Server Pages standarded Tag Library  JSP标准标签库
			是由Apache组织提供的开源的免费的jsp标签	
		2. 作用：用于简化和替换jsp页面上的java代码		
		3. 使用步骤：
			1. 导入jstl相关jar包
			2. 引入标签库：taglib指令：  <%@ taglib prefix ="c" uri="http://java.sun.com/jsp/jstl/core"%>
			3. 使用标签
	2、JSTL_常用标签_if
		if:相当于java代码的if语句
			1. 属性：
	            test 必须属性，接受boolean表达式
	                1、如果表达式为true，则显示if标签体内容，如果为false，则不显示标签体内容
	                2、一般情况下，test属性值会结合el表达式一起使用<c:if test=""></c:if>
       		 2. 注意：
	       		c:if标签没有else情况，想要else情况，则可以在定义一个c:if标签
	3、JSTL_常用标签_choose
		1、choose:相当于java代码的switch语句
			1. 使用choose标签声明         			相当于switch声明
            2. 使用when标签做判断         			相当于case
            3. 使用otherwise标签做其他情况的声明    	相当于default
			
		2、案例代码
			<c:choose>
				<c:when test="${number == 1}">星期一</c:when>
				<c:otherwise>数字输入有误</c:otherwise>
			</c:choose>
	4、JSTL_常用标签_foreach
		foreach:相当于java代码的for语句
		1. 完成重复的操作
            for(int i = 0; i < 10; i ++){
            }
            属性：
                1、begin：开始值
                2、end：结束值
                3、var：临时变量
                4、step：步长
                5、varStatus:循环状态对象
                    1、index:容器中元素的索引，从0开始
                    2、count:循环次数，从1开始
        2. 遍历容器
            List<User> list;
            for(User user : list){
            }
            属性：
                1、items:容器对象
                2、var:容器中元素的临时变量
                3、varStatus:循环状态对象
                    1、index:容器中元素的索引，从0开始
                    2、count:循环次数，从1开始
	5、JSTL_练习
		需求：在request域中有一个存有User对象的List集合。需要使用jstl+el将list集合数据展示到jsp页面的表格table中
		
		使用JSTL标签的属性值需要使用EL表达式的格式
		<c:forEach items="${list}" var="user" varStatus="status">
			<c:if test="${status.count % 2 == 0}">
				<tr bgcolor="yellow">
					<td>${status.index}</td>
					<td>${user.name}</td>
					<td>${user.age}</td>
					<td>${user.dateStr}</td>
				</tr>
			</c:if>
			<c:if test="${status.count % 2 != 0}">
				<tr bgcolor="green">
					<td>${status.index}</td>
					<td>${user.name}</td>
					<td>${user.age}</td>
					<td>${user.dateStr}</td>
				</tr>
			</c:if>
		</c:forEach>
	
第6节案例实现
	1、三层架构
		1. 界面层(表示层/web层)：用户看的得界面。用户可以通过界面上的组件和服务器进行交互
			1、代表框架：SpringMVC框架
			2、包含内容：控制器(servlet)、视图(JSP)
			3、在项目中的架构位置：cn.域名.项目名.web
			4、功能：
				1、接收浏览器请求,获取参数
				2、封装数据
				3、调用业务逻辑层完成处理
				4、转发到JSP页面展示
		2. 业务逻辑层(service层)：处理业务逻辑的。
			1、代表框架：Spring框架
			2、包含内容：属于MVC模式中的M的一部分
			3、在项目中的架构位置：cn.域名.项目名.service
			4、功能：
				1、组合DAO层中简单的方法，形成复杂的功能(业务逻辑操作)
		3. 数据访问层(dao层)：操作数据存储文件。
			1、代表框架：MyBatis框架
			2、包含内容：属于MVC模式中的M的一部分
			3、在项目中的架构位置：cn.域名.项目名.dao
			4、功能：
				1、定义对数据库最基本的CRUD操作
	2、案例_需求分析&设计
		1. 需求：用户信息的增删改查操作
		2. 设计：
			1. 技术选型：Servlet+JSP+MySQL+JDBCTempleat+Duird+BeanUtilS+tomcat
			2. 数据库设计：
				CREATE DATABASE day18; 					-- 创建数据库
				USE day18; 			  					-- 使用数据库
				CREATE TABLE USER(   					-- 创建表
					id INT PRIMARY KEY AUTO_INCREMENT,	-- id字段主键、自增长
					NAME VARCHAR(20) NOT NULL,			-- 姓名字段 非空
					gender VARCHAR(5),					-- 性别字段
					age INT,							-- 年龄字段
					address VARCHAR(32),				-- 籍贯字段
					qq	VARCHAR(20),					-- qq字段
					email VARCHAR(50)					-- 邮箱字段
				);
		3. 开发：
			1. 环境搭建
				1. 创建数据库环境
				2. 创建项目，导入需要的jar包(MySQL驱动包+JSTL标签库+Druid数据库连接池+JDBCTempleat简化JDBC操作的包+JavaBean工具包)
			2. 编码
		4. 测试
		5. 部署运维
	3、案例_环境搭建
		1、创建数据库
		2、创建项目
			1、导入jar包
			2、配置tomcat
			3、导入前端界面
			4、在src目录下创建一些包
				1、cn.jianjie.web
					cn.jianjie.web.servlet
				2、cn.jianjie.service
					cn.jianjie.service.impl
				3、cn.jianjie.dao
					cn.jianjie.dao.impl
				4、cn.jianjie.domain
				5、cn.jianjei.utils
			5、复制配置文件进src目录下,工具类复制进utils包下
	4、案例_列表查询_分析
		注意事项：
			1、service层和dao层一般面向接口编程，即这一层一般会抽象出接口和实现类
			2、service层的实现类一般调用dao层的方法
			3、dao层的实现类一般使用jdbc操作数据库
	5、案例_列表查询_代码实现
		1、编写domain中JavaBean类
		2、编写servlet类,类里面调用service层代码
		3、编写service层代码,包含service层的接口和实现类。service层实现类调用dao层实现类
		4、编写dao层代码,包含dao层的接口和实现类。dao层实现类调用JdbcTemplate技术简化JDBC操作。
			JdbcTemplate技术又要调用JDBCUtils工具类,该工具类使用Druid连接池技术
		5、编写jsp页面。使用JSTL标签和EL表达式动态获取数据库数据到页面上
	