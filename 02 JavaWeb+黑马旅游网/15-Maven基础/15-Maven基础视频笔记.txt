第1节 基本概念
	1、maven概述
		Maven能够做什么：
			1、帮你构建工程
			2、管理 jar包
			3、编译代码
			4、自动运行单元测试
			5、打包，生成报表
			6、部署项目，生成 Web 站点
	2、maven依赖管理的概念(pom.xml文件是project object management项目对象管理)
		1、Maeven的依赖管理：就是一个管理jar包的过程
		2、实现过程：maven 工程中不直接将 jar 包导入到工程中，而是通过在 pom.xml 文件中添加所需 jar包的坐标，
			这样就很好的避免了 jar 直接引入进来，在需要用到 jar 包的时候，只要查找 pom.xml 文件，再通过 pom.xml 文件中的坐标，
			到一个专门用于”存放 jar 包的仓库”(maven 仓库)中根据坐标从而找到这些 jar 包，再把这些 jar 包拿去运行。
			
			
		3、问题：通过读取 pom.xml 文件中的坐标，再到仓库中找到 jar 包，会不会很慢？从而导致这种方式不可行！
			解决方式：为了解决这个过程中速度慢的问题，maven 中也有索引的概念，通过建立索引，可以大大提高加载 jar 包的速度，
			使得我们认为 jar 包基本跟放在本地的工程文件中再读取出来的速度是一样的。

	3、maven一键构建概念
		1、什么是构建？
			指的是项目从编译、测试、运行、打包、安装、部署整个过程都交给 maven 进行管理，这个过程称为构建。
		2、什么是一键构建：
			指的是整个构建过程，使用 maven 一个命令(mvn tomcat:run)可以轻松完成整个工作。
第2节 maven的安装和仓库种类
	1、maven的安装
		1、Maven结构:
			1、bin:存放了 maven 的命令，比如我们前面用到的 mvn tomcat:run
			2、boot:存放了一些 maven 本身的引导程序，如类加载器等
			3、conf:存放了 maven 的一些配置文件，如 setting.xml 文件
			4、lib:存放了 maven 本身运行所需的一些 jar 包
		至此我们的 maven 软件就可以使用了，前提是你的电脑上之前已经安装并配置好了 JDK
	2、仓库的种类和彼此关系
		1、本地仓库 ：用来存储从远程仓库或中央仓库下载的插件和 jar 包，项目使用一些插件或 jar 包，优先从本地仓库查找
			默认本地仓库位置在 ${user.dir}/.m2/repository，${user.dir}表示 windows 用户目录。
			在maven文件夹下的/conf/settings.xml文件中配置
		2、远程仓库【私服】：如果本地需要插件或者 jar 包，本地仓库没有，默认去远程仓库下载。远程仓库可以在互联网内也可以在局域网内。
		3、中央仓库 ：在 maven 软件中内置一个远程仓库地址 http://repo1.maven.org/maven2 ，它是中央仓库，
			服务于整个互联网，它是由 Maven 团队自己维护，里面存储了非常全的 jar 包，它包含了世界上大部分流行的开源项目构件。

第3节 maven标准目录结构和常用命令
	1、maven标准目录结构
		1、src目录：
			1、src/main/java：存放项目的.java 文件
			2、src/main/resources：存放项目资源文件，如 spring, hibernate 配置文件
			3、src/main/webapp：页面的素材例如html、css、js等文件
			
			4、src/test/java：存放所有单元测试.java 文件，如 JUnit 测试类
			5、src/test/resources：测试资源文件
		2、target目录：项目输出位置，编译后的 class 文件会输出到此目录
		3、pom.xml文件：maven 项目核心配置文件，存放jar包的坐标信息等
		
		注意：如果是普通的 java 项目，那么就没有 webapp 目录。

	2、maven常用命令
		我们可以在 cmd 中通过一系列的 maven 命令来对我们的 maven-helloworld 工程进行编译、测试、运行、打包、安装、部署。
		启动tomcat：mvn tomcat:run
		
		
		1、清除命令:mvn clear
			clean 是 maven 工程的清理命令，执行 clean 会删除 target 目录及内容
		2、编译命令:mvn compile
			compile 是 maven 工程的编译命令，作用是将 src/main/java 下的文件编译为 class 文件输出到 target目录下。
		3、测试命令:mvn test
			test 是 maven 工程的测试命令 mvn test，会执行 src/test/java 下的单元测试类。并且这个命令的执行包括之前的编译命令
		4、打包命令:mvn package
			package 是 maven 工程的打包命令，对于 java 工程执行 package 打成 jar 包，对于 web 工程打成 war包。
			并且这个命令的执行包括之前的编译命令+测试命令
		5、安装命令:mvn install
			install 是 maven 工程的安装命令，执行 install 将 maven 打成 jar 包或 war 包发布到本地仓库。
			并且这个命令的执行包括之前的编译命令+测试命令+打包命令
			
		6、发布命令：mvn deploy
第4节 maven生命周期和概念模型图
	1、maven生命周期:
		maven 对项目构建过程分为三套相互独立的生命周期，请注意这里说的是“三套”，而且“相互独立”，这三套生命周期分别是：
		1、Clean Lifecycle(清除生命周期：mvn clear,在进行真正的构建之前进行一些清理工作。
		2、Default Lifecycle(默认生命周期):构建的核心部分，编译，测试，打包，部署等等。
			1、编译：mvn compile
			2、测试:mvn test
			3、打包:mvn package
			4、部署:mvn install
			5、发布:mvn deploy
		3、Site Lifecycle(站点生命周期):生成项目报告，站点，发布站点。
	2、maven概念模型图
		1、maven概念:Maven 包含了
			1、一个项目对象模型 (Project Object Model)
				一个 maven 工程都有一个 pom.xml 文件，通过 pom.xml 文件定义项目的坐标、项目依赖、项目信息、插件目标等。
			2、一组标准集合
				maven 将整个项目管理过程定义一组标准，比如：通过 maven 构建工程有
				标准的目录结构，有标准的生命周期阶段、依赖管理有标准的坐标定义等。
			3、一个项目生命周期(ProjectLifecycle)
				使用 maven 完成项目的构建，项目构建包括：清理、编译、测试、部署等过程，maven 将这些过程规范为一个生命周期，
				maven 通过执行一些简单命令即可实现上边生命周期的各各过程。
			4、一个依赖管理系统(Dependency Management System)
				通过 maven 的依赖管理对项目所依赖的 jar 包进行统一管理。
			5、和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。
				maven 管理项目生命周期过程都是基于插件完成的。
		2、maven最重要的两个功能
			1、依赖管理
				1、项目对象模型(POM):pom.xml文件
					1、项目自身信息
					2、项目运行所依赖的jar包信息
					3、项目运行环境信息：比如JDK\tomcat信息
				2、依赖管理模型(dependency):配置在pom.xml文件中的dependency标签中
					1、公司组织名称：groupId标签内容
					2、项目名：artifactId标签内容
					3、版本号：version标签内容
					<dependency>
						<groupId>javax.servlet</groupId>
						<artifactId>servlet-api</artifactId>
						<version>2.5</version>
					</dependency>
				3、对应的三种仓库位置
					1、本地仓库
					2、远程仓库【私服】
					3、中央仓库
					
					三种仓库存在不同情况下的调用信息
					1、本地仓库没有时:默认会去中央仓库下载jar包，如果是在公司的话会去远程仓库寻找
					2、如果远程仓库没有时：可以从本地仓库上传或是从远程仓库下载
			2、一键构建：清除、编译、测试、打包、安装(部署)、发布
				默认的生命周期中每一个构建项目的命令都对应了maven底层的一个插件
第5节 使用骨架创建maven的java工程
	1、idea集成maven插件
		1、打开File->Settings->配置maven
		2、在Runner->VM options:-DarchetypeCatalog=internal
	2、使用骨架创建maven的java工程
		1、打开 idea，选择创建一个新工程
		2、选择 idea 提供好的maven的web工程模板(org.apache.maven.archetypes:maven-archetype-quickstart)
		3、点击 Next 填写项目信息
		4、项目结构不完整，手动创建补齐
			1、创建java目录
				1、手动添加 src/main/java 目录，右键 main 文件夹NewDirectory
				2、创建一个新的文件夹命名为 java
				3、点击 OK 后，在新的文件夹 java 上右键Make Directory asSources Root
			2、创建resources目录
				1、手动添加 src/main/resources 目录，右键 main 文件夹NewDirectory
				2、创建一个新的文件夹命名为 resources
				3、点击 OK 后，在新的文件夹 resources 上右键Make Directory asResources Root
	3、不使用骨架创建maven的java工程
		直接不勾选工程模板就可以了
	4、使用骨架创建maven的web工程
		选择 idea 提供好的maven的web工程模板(org.apache.maven.archetypes:maven-archetype-webapp)
第6节 maven工程servlet实例
	1、maven工程servlet实例之指定web资源包
		1、点击File->Project Structure->Moudles->添加Web Resource Directory
	2、maven工程servlet实例之导入项目依赖的jar包
		1、在pom.xml文件中添加servlet的jar包的坐标
			<dependencies>
				<dependency>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
					<version>4.11</version>
					<scope>test</scope>
				</dependency>
				<dependency>
					<groupId>javax.servlet</groupId>
					<artifactId>servlet-api</artifactId>
					<version>2.5</version>
				</dependency>
				<dependency>
					<groupId>javax.servlet.jsp</groupId>
					<artifactId>jsp-api</artifactId>
					<version>2.0</version>
				</dependency>
			</dependencies>
			
		2、在对应的包中编写servlet
		3、在web.xml文件中编写路由
			<servlet>
				<servlet-name>MyServlet</servlet-name>
				<servlet-class>cn.jianjie.web.servlet.MyServlet</servlet-class>
			</servlet>
			<servlet-mapping>
				<servlet-name>MyServlet</servlet-name>
				<url-pattern>/myServlet</url-pattern>
			</servlet-mapping>
			
		4、启动tomcat
			在Maven Project->Excute Maven Goal->编写tomcat:run
	3、maven工程servlet实例之jar包冲突解决
		1、原因：jar包冲突的原因一般是依赖范围scop没设置好
		2、解决方式：在pom.xml文件中的坐标信息添加scop标签并添加适合的范围内容
		3、依赖范围：
			 1、默认引入 的 jar 包			compile 【默认范围可以不写】（编译、测试、运行都有效 ）
			 2、servlet-api 、jsp-api			provided （编译、测试有效，运行时无效防止和tomcat下jar冲突）
			 3、jdbc 驱动 jar 包				runtime （测试、运行有效 ）
			 4、junit							test （测试有效）
			注意：依赖范围由强到弱的顺序是：compile>provided>runtime>test
		
	4、maven工程运行环境修改
		1、修改tomcat插件
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.tomcat.maven</groupId>
						<artifactId>tomcat7-maven-plugin</artifactId>
						<version>2.2</version>
						<configuration>
							<port>8888</port>
						</configuration>
					</plugin>
				</plugins>
			</build>
		2、设置JDK编译版本
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugin</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<configuration>
							<target>1.8</target>
							<source>1.8</source>
							<encoding>UTF-8</encoding>
						</configuration>
					</plugin>
				</plugins>
			</build>
			
			
			
		3、设置live模板
			File->Setting->搜索Live Templates->添加组后在组下面编写
	5、maven的java工程取mysql数据库数据