第1节 Cookie快速入门
	1、今日内容
		1. 会话技术
			1. Cookie
			2. Session
		2. JSP：入门学习
	2、会话技术_概述
		1. 会话：一次会话中包含多次请求和响应。
			一次会话：浏览器第一次给服务器资源发送请求，会话建立，直到有一方断开为止
		2. 功能：在一次会话的范围内的多次请求间，共享数据
		3. 方式：
			1. 客户端会话技术：Cookie
			2. 服务器端会话技术：Session
	3、会话技术_Cookie_快速入门
		1. 概念：客户端会话技术，将数据保存到客户端
		2. 快速入门：
			* 使用步骤：
				1. 创建Cookie对象，绑定数据
					* new Cookie(String name, String value) 
				2. 发送Cookie对象
					* response.addCookie(Cookie cookie) 
				3. 获取Cookie，拿到数据
					* Cookie[]  request.getCookies()
		3、设置idea代码模板
			1、File->settings->搜索code templates->Web->Java code Templates->Servlet Annotated Class.java
	4、会话技术_Cookie_原理分析
		1、实现原理:基于响应头set-cookie和请求头cookie实现
			1、在服务器使用response对象发送(调用addCookie()方法)Cookie对象的时候实际上是设置响应头为set-Cookie:msg=hello;
			2、在服务器中获取客户端发送的Cookie消息时，实际是根据客户端的请求头cookie:msg=hello来获取Cookie数据的(request对象调用getCookie()方法)
第2节 Cookie_细节
	1、会话技术_Cookie_细节1_发送多个Cookie
		1、答案是可以的
		2、方式：可以创建多个Cookie对象，使用response调用多次addCookie方法发送cookie即可。
		
		3、注意事项：如果在服务器中创建了Cookie对象并且把Cookie对象保存到浏览器中的话，
			那么在这次会话中的所有请求都会带有cookie这种的请求头，注意要求是这个项目的请求。
	2、会话技术_Cookie_细节2_Cookie存活时间
		1. 默认情况下，当浏览器关闭后，Cookie数据被销毁
		2. 持久化存储：
			Cookie对象的setMaxAge(int seconds)方法
				1. 正数：将Cookie数据写到硬盘的文件中。持久化存储。并指定cookie存活时间，时间到后，cookie文件自动失效
				2. 负数：默认值
				3. 零：删除cookie信息
	3、会话技术_Cookie_细节3_Cookie存储中文
		1、在tomcat8之前 cookie中不能直接存储中文数据。
			需要将中文数据转码---一般采用URL编码(%E3)
		2、在tomcat 8 之后，cookie支持中文数据。特殊字符还是不支持，建议使用URL编码存储，URL解码解析
	4、会话技术_Cookie_细节4_Cookie共享问题
		1. 假设在一个tomcat服务器中，部署了多个web项目，那么在这些web项目中cookie能不能共享？
			1、默认情况下cookie不能共享
			2、setPath(String path):设置cookie的获取范围。默认情况下，设置当前的虚拟目录
				如果要共享，则可以将path设置为"/"
		
		2. 不同的tomcat服务器间cookie共享问题？
			1、setDomain(String path):如果设置一级域名相同，那么多个服务器之间cookie可以共享
				setDomain(".baidu.com"),那么tieba.baidu.com和news.baidu.com中cookie可以共享
	5、会话技术_Cookie_特点&作用
		1、特点：
			1. cookie存储数据在客户端浏览器
			2. 浏览器对于单个cookie 的大小有限制(4kb) 以及 对同一个域名下的总cookie数量也有限制(20个)

		2、作用：
			1. cookie一般用于存出少量的不太敏感的数据
			2. 在不登录的情况下，完成服务器对客户端的身份识别
第3节 Cookie案例
	1、会话技术_Cookie_案例_分析
		1. 需求：
			1. 访问一个Servlet，如果是第一次访问，则提示：您好，欢迎您首次访问。
			2. 如果不是第一次访问，则提示：欢迎回来，您上次访问时间为:显示时间字符串

		2. 分析：
			1. 可以采用Cookie来完成
			2. 在服务器中的Servlet判断是否有一个名为lastTime的cookie
				1. 有：不是第一次访问
					1. 响应数据：欢迎回来，您上次访问时间为:2018年6月10日11:50:20
					2. 写回Cookie：lastTime=2018年6月10日11:50:01
				2. 没有：是第一次访问
					1. 响应数据：您好，欢迎您首次访问
					2. 写回Cookie：lastTime=2018年6月10日11:50:01
	2、会话技术_Cookie_案例_代码实现
		1、注意事项：
			1、因为获取到的数组可能为Null会造成空指针异常,需要先判断数组是否为空
			2、因为响应体数据存在中文字符串需要设置响应消息体的编码
			3、因为cookie中可能存在其他软件的cookie值,所以判断存不存在在键为lastTime的cookie,
				可以使用一个布尔值保存结果

			4、如果Cookie的key相同的话会把之前的值覆盖掉
			5、Cookie不支持特殊字符,比如空格,想要保存需要使用URL编码和解码
			6、注意要先响应数据到页面再把当前时间发送到cookie保存,不然时间会颠倒
        encode为编码decoder为解码
第4节 JSP改造Cookie案例
	1、JSP_概念
		1、Java Server Pages： java服务器端页面
			1、可以理解为：一个特殊的页面，其中既可以指定定义html标签，又可以定义java代码
			2、用于简化书写！！！
	2、JSP_原理
		原理：JSP本质上就是一个Servlet
	3、JSP_脚本
		JSP的脚本：JSP定义Java代码的方式
		1. <%  代码 %>：定义的java代码，在service方法中。service方法中可以定义什么，该脚本中就可以定义什么。
		2. <%! 代码 %>：定义的java代码，在jsp转换后的java类的成员位置。
		3. <%= 代码 %>：定义的java代码，会输出到页面上。输出语句中可以定义什么，该脚本中就可以定义什么。
	4、JSP_入门学习
		JSP的内置对象：
			1、在jsp页面中不需要获取和创建，可以直接使用的对象
			2、jsp一共有9个内置对象。
			3、今天学习3个：
				1、request
				2、response
				3、out：字符输出流对象。可以将数据输出到页面上。和response.getWriter()类似
					1、response.getWriter()和out.write()的区别：
						1、在tomcat服务器真正给客户端做出响应之前，会先找response缓冲区数据，再找out缓冲区数据。
						2、response.getWriter()数据输出永远在out.write()之前
	5、JSP_案例_改造Cookie案例
第5节 Session快速入门
	1、会话技术_Session_快速入门
		1、概念：服务器端会话技术，在一次会话的多次请求间共享数据，将数据保存在服务器端的对象中。HttpSession
		2、快速入门：
			1. 获取HttpSession对象：
				HttpSession session = request.getSession();
			2. 使用HttpSession对象：
				Object getAttribute(String name)  
				void setAttribute(String name, Object value)
				void removeAttribute(String name)  
	2、会话技术_Session_原理分析
		1、Session的实现是依赖于Cookie的。
		2、服务器在一次会话中，多次请求间获取的Session对象是同一个
			如何实现的？：
				1、第一次获取session对象，没有对应的Cookie，会在内存中创建一个新的Session对象(保存唯一的ID值)
				2、在响应头中设置:set-cookie:JSESSIONID=唯一的ID值
				3、在下次请求时携带对应的请求头：Cookie:JSESSIONID=唯一的ID值
第6节 Session细节
	1、会话技术_Session_细节1
		1. 当客户端关闭后，服务器不关闭，两次获取session是否为同一个？
			1、默认情况下。不是。因为客户端关闭了这次会话就结束了
			2、如果需要相同，则可以创建Cookie,键为JSESSIONID，设置最大存活时间，让cookie持久化保存。
				 Cookie c = new Cookie("JSESSIONID",session.getId());
		         c.setMaxAge(60*60);
		         response.addCookie(c);
	2、会话技术_Session_细节2
		1、客户端不关闭，服务器关闭后，两次获取的session是同一个吗？
			1、不是同一个，但是要确保数据不丢失。tomcat自动完成以下工作
				1、session的钝化：
					在服务器正常关闭之前，将session对象系列化到硬盘上
				2、session的活化：
					在服务器启动后，将session文件转化为内存中的session对象即可。
		2、Session的钝化和活化tomcat已经自动帮我们完成了。但是Idea中的tomcat不行(钝化可以,活化失败)
	3、会话技术_Session_细节3_session销毁
		1. 服务器关闭
		2. session对象调用invalidate() 。
		3. session默认失效时间 30分钟
			选择性配置修改	
			<session-config>
				<session-timeout>30</session-timeout>
			</session-config>
	4、会话技术_Session_特点
		1、session用于存储一次会话的多次请求的数据，存在服务器端
		2、session可以存储任意类型，任意大小的数据

		3、session与Cookie的区别：
			1. session存储数据在服务器端，Cookie在客户端
			2. session没有数据大小限制，Cookie有
			3. session数据安全，Cookie相对于不安全
第7节 Session之验证码案例
	1、案例_验证码_需求&分析
		案例需求：
		1. 访问带有验证码的登录页面login.jsp
		2. 用户输入用户名，密码以及验证码。
			1、如果用户名和密码输入有误，转发登录页面，提示:用户名或密码错误
			2、如果验证码输入有误，转发登录页面，提示：验证码错误
			3、如果全部输入正确，则重定向到主页success.jsp，显示：用户名,欢迎您
	2、案例_验证码_代码实现
		1、前端展示编写
		2、编写Servlet验证
		3、先判断验证码是否正确再判断账户和密码是否正确
	3、案例_验证码_细节处理
		1、使用三元表达式优化显示效果,把null的结果隐藏
		2、每次获取到验证码都删除session保证验证码只能使用一次。