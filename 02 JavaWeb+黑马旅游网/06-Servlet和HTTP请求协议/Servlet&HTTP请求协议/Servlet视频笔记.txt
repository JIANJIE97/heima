01Servlet_快速入门
	1、Servlet_概述
		1、Servlet: Server Applet
			概念：运行在服务端的小程序
		2、Servlet就是一个接口,定义了Java类被浏览器访问到(tomcat识别)的规则
		3、将来我们自定义一个类,实现了Servlet接口,复写方法
	2、Servlet_快速入门
		1、创建JavaEE项目
		2、定义一个类,实现Servlet接口
			public class ServletDemo1 implements Servlet
		3、实现接口中的抽象方法
			1、init
			2、getServletConfig
			3、service
			4、getServletInfo
			5、destroy
		4、配置Servlet
			在web.xml中配置
			
			配置类和名字
			<servlet>
				<servlet-name>demo01</servlet-name>
				<servlet-class>cn.jianjie.web.servlet.ServeletDemo01</servlet-class>
			</servlet>
			
			配置名字和访问路径
			<servlet-mapping>
				<servlet-name>demo01</servlet-name>
				<url-pattern>/demo01</url-pattern>
			</servlet-mapping>
	3、_Servlet_执行原理
		1、添加虚拟目录(以项目名称作为虚拟目录):Run->Edit Configurations->Tomcat Server->Deployment->设置虚拟目录
		
		
		2、执行原理
			1、当服务器接收到浏览器的请求后,会解析请求的URL路径,获取访问的Servlet的资源路径(http://localhost:8080/虚拟目录/demo01)
				demo01为Servlet的资源路径
			2、查找web.xml文件中<url-pattern>标签体内容是否与Servlet的资源路径相同
			3、如果有,则在xml文件中找到<servlet-class>全类名
			4、tomcat会将Servlet类字节码文件加载进内存,并且创建Servlet类对象
				class.forName();
				cls.newInstance();
			5、调用Servlet类方法
				通过对象调用Servlet类中的方法
02Servlet_生命周期方法
	1、Servlet_生命周期
		1. 被创建：执行init方法，只执行一次
			1、Servlet什么时候被创建？
				1、默认情况下，第一次被访问时，Servlet被创建
				2、特殊情况(可以配置Servlet的创建时机)
					在<servlet>标签下配置
						1. 第一次被访问时，创建
	                		<load-on-startup>的值为负数(默认情况下该值为-1)
			            2. 在服务器启动时，创建
			                <load-on-startup>的值为0或正整数
			2、Servlet的init方法，只执行一次，说明一个Servlet在内存中只存在一个对象，Servlet是单例的
				1、因为是单例模式,是共享资源,当多个用户同时访问时，可能存在线程安全问题。
				2、解决：尽量不要在Servlet中定义成员变量。即使定义了成员变量，也不要对其修改值
		2. 提供服务：执行service方法，执行多次
			每次访问Servlet时，Service方法都会被调用一次。
		3. 被销毁：执行destroy方法，只执行一次
			1、Servlet被销毁时才执行destroy方法。
			2、服务器关闭时，Servlet被销毁(只有当服务器正常关闭时，才会执行destroy方法)
			3、destroy方法在Servlet被销毁之前执行，一般用于释放资源
03Servlet_3.0注解配置
	1、Servlet_3.0注解配置
		1、好处：
			支持注解配置。可以不需要web.xml了。
		2、步骤：
			1. 创建JavaEE项目，选择Servlet的版本3.0以上，可以不创建web.xml
			2. 定义一个类，实现Servlet接口
			3. 复写方法
			4. 在类上使用@WebServlet注解，进行配置
				@WebServlet("资源路径")
04 IDEA与tomcat相关配置
	1、IDEA与tomcat相关配置
		1. IDEA会为每一个tomcat部署的项目单独建立一份配置文件
			查看控制台的log：CATALINA_BASE:   "C:\Users\Administrator\.IntelliJIdea2017.3\system\tomcat\_basic"

		2. 工作空间项目    和     tomcat部署的web项目
			1、tomcat真正访问的是“tomcat部署的web项目”，"tomcat部署的web项目"对应着"工作空间项目" 的web目录下的所有资源
				两个项目存放的位置是不一样的
			2、WEB-INF目录下的资源不能被浏览器直接访问。
		3. 断点调试：使用"小虫子"启动 dubug 启动
05 Servlet_体系结构与urlpartten配置
	1、今日内容
	2、Servlet_体系结构
		Servlet -- 接口
			|
		GenericServlet -- 抽象类
			|
		HttpServlet  -- 抽象类

		1、GenericServlet：将Servlet接口中其他的方法做了默认空实现，只将service()方法作为抽象
			将来定义Servlet类时，可以继承GenericServlet，实现service()方法即可

		2、HttpServlet：对http协议的一种封装，简化操作
			1. 定义类继承HttpServlet
			2. 复写doGet/doPost方法
	3、Servlet_urlpartten配置
		1. urlpartten:Servlet访问路径
			1. 一个Servlet可以定义多个访问路径 ： @WebServlet({"/d4","/dd4","/ddd4"})
			2. 路径定义规则：
				1. /xxx：路径匹配
				2. /xxx/xxx:多层路径，目录结构
				3. *.do：扩展名匹配(注意不能加斜杠不然启动tomcat会报错)
06 HTTP请求协议
	1、HTTP_概述
		1、概念：Hyper Text Transfer Protocol 超文本传输协议
		2、传输协议：定义了，客户端和服务器端通信时，发送数据的格式
		3、特点：
			1. 基于TCP/IP的高级协议
			2. 默认端口号:80
			3. 基于请求/响应模型的:一次请求对应一次响应
			4. 无状态的：每次请求之间相互独立，不能交互数据

		4、历史版本：
			1、http1.0：每一次请求响应都会建立新的连接
			2、http1.1：复用连接,对缓存的支持更好
	2、HTTP_请求消息_请求行
		1、请求消息数据格式
			1、请求行:请求方式 请求url 请求协议/版本
						GET   /login.html	HTTP/1.1
			2、请求头:客户端浏览器告诉服务器一些信息
				格式：请求头名称: 请求头值
			3、请求空行:空行，就是用于分割POST请求的请求头，和请求体的。
			4、请求体(正文):封装POST请求消息的请求参数的
			
		2、请求行
			1、请求行格式：
				请求方式 请求url 请求协议/版本
				GET /login.html	HTTP/1.1

			2、请求方式：
				HTTP协议有7中请求方式，常用的有2种
					1、GET：
						1. 请求参数在请求行中，在url后。
						2. 请求的url长度有限制的
						3. 不太安全
					2、POST：
						1. 请求参数在请求体中
						2. 请求的url长度没有限制的
						3. 相对安全
	3、HTTP_请求消息_请求头&请求体
		1、请求头：客户端浏览器告诉服务器一些信息
			1、请求头名称: 请求头值
			2、常见的请求头：
				1. User-Agent：浏览器告诉服务器，我访问你使用的浏览器版本信息
					可以在服务器端获取该头的信息，解决浏览器的兼容性问题
				2. Referer：http://localhost/login.html：告诉服务器，我(当前请求)从哪里来？
					作用：
						1. 防盗链：
						2. 统计工作：
						
		2、请求空行:空行，就是用于分割POST请求的请求头，和请求体的。
		3、请求体(正文):封装POST请求消息的请求参数的
							
		