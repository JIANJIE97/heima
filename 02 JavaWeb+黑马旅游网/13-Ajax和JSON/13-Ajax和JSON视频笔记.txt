第1节 原生JS方式实现Ajax
	1、今日内容
		1. AJAX：
		2. JSON：
	2、AJAX_概念
		1. 概念：ASynchronous JavaScript And XML(异步的JavaScript和XML)
			1. 异步和同步：客户端和服务器端相互通信的基础上
				1、同步：客户端必须等待服务器端的响应。在等待的期间客户端不能做其他操作。
				2、异步：客户端不需要等待服务器端的响应。在服务器处理请求的过程中，客户端可以进行其他的操作。

			2、Ajax技术用途：Ajax技术是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。 
			3、使用Ajax技术和没使用Ajax技术的区别：
				通过在后台与服务器进行少量数据交换，Ajax可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。
				传统的网页（不使用 Ajax）如果需要更新内容，必须重载整个网页页面。
			4、最核心目的：提升用户的体验
	3、AJAX_实现_原生JS方式
		1. 原生的JS实现方式（了解）
			 //1.创建核心对象
				var xmlhttp;
				if (window.XMLHttpRequest)
				{// code for IE7+, Firefox, Chrome, Opera, Safari
					xmlhttp=new XMLHttpRequest();
				}
				else
				{// code for IE6, IE5
					xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
				}
			//2. 建立连接
				/*
					参数：
						1. 请求方式：GET、POST
							1、get方式，请求参数在URL后边拼接。send方法为空参
							2、post方式，请求参数在send方法中定义
						2. 请求的URL：
						3. 同步或异步请求：true（异步）或 false（同步）

				 */
				xmlhttp.open("GET","ajaxServlet?username=tom",true);
			//3.发送请求
				xmlhttp.send();
			//4.接受并处理来自服务器的响应结果
				//获取方式 ：xmlhttp.responseText
				//什么时候获取？当服务器响应成功后再获取

				//当xmlhttp对象的就绪状态改变时，触发事件onreadystatechange。
				xmlhttp.onreadystatechange=function()
				{
					//判断readyState就绪状态是否为4，判断status响应状态码是否为200
					if (xmlhttp.readyState==4 && xmlhttp.status==200)
					{
					   //获取服务器的响应结果
						var responseText = xmlhttp.responseText;
						alert(responseText);
					}
				}
第2节 JQuery方式实现Ajax
	1、AJAX_实现_JQuery实现方式_ajax()
		1. $.ajax()
			1、语法：$.ajax({键值对});
			2、案例：使用$.ajax()发送异步请求
				$.ajax({
					url:"ajaxServlet1111" , 			// 请求路径
					type:"POST" , 						//请求方式
					//data: "username=jack&age=23",		//请求参数
					data:{"username":"jack","age":23},
					success:function (data) {			//响应成功后的回调函数
						alert(data);
					},						
					error:function () {					//表示如果请求响应出现错误，会执行的回调函数
						alert("出错啦...")
					},								
					dataType:"text"						//设置接受到的响应数据的格式
				});
	2、AJAX_实现_JQuery实现方式_get&post
		2、$.get()：发送get请求
			1、语法：$.get(url, [data], [callback], [type])
			2、参数：
				1、url：请求路径
				2、data：请求参数
				3、callback：回调函数
				4、type：响应结果的类型
			3、案例：
				$.get("ajaxServlet",{username:"rose"},function (data) {
					alert(data);
				},"text");
		3、$.post()：发送post请求
			1、语法：$.post(url, [data], [callback], [type])
			2、参数：
				1、url：请求路径
				2、data：请求参数
				3、callback：回调函数
				4、type：响应结果的类型
			3、案例：
				$.post("ajaxServlet",{username:"rose"},function (data) {
					alert(data);
				},"text");
第3节 JSON基础语法
	1、JSON_概念
		1、概念：JavaScript Object Notation(JavaScript对象表示法)
			1、Java中对象的表示
				Person p = new Person();
				p.setName("张三");
				p.setAge(23);
				p.setGender("男");
			2、JavaScript中对象的表示
				var p = {"name":"张三","age":23,"gender":"男"};
		2、JSON更广的用途：
			1、json现在多用于存储和交换文本信息的语法
			2、进行数据的传输
			3、JSON 比 XML 更小、更快，更易解析。
	2、JSON_语法_定义
		语法：
		1. 基本规则
			1、数据在名称/值对中：json数据是由键值对构成的
				1、键用引号(单双都行)引起来，也可以不使用引号
				2、值得取值类型：
					1. 数字（整数或浮点数）
					2. 字符串（在双引号中）
					3. 逻辑值（true 或 false）
					4. 数组（在方括号中）	{"persons":[{},{}]}
					5. 对象（在花括号中） {"address":{"province"："陕西"....}}
					6. null
			2、数据由逗号分隔：多个键值对由逗号分隔
			3、花括号保存对象：使用{}定义json 格式
			4、方括号保存数组：[]
		2、基本格式
		3、嵌套格式：
			1、{}包含[]
			2、[]包含{}
	3、JSON_语法_值的获取
		获取数据:
			1. json对象.键名
			2. json对象["键名"]
			3. 数组对象[索引]
			4. 遍历
				//1、定义基本格式
			        var person = {"name": "张三", age: 23, 'gender': true};
			        var ps = [{"name": "张三", "age": 23, "gender": true},
			            {"name": "李四", "age": 24, "gender": true},
			            {"name": "王五", "age": 25, "gender": false}];
	
			    //2、获取person对象中所有的键和值
			        //for in 循环获取到的key值是包含引号的字符串格式:"name"
					//1、获取基本格式的JSON数据
						for(var key in person){
							//这样的方式获取不行。因为相当于  person."name"
							//alert(key + ":" + person.key);
							alert(key+":"+person[key]);
						}
					//2、获取数组中JSON对象的数据
					   //获取ps中的所有值
						for (var i = 0; i < ps.length; i++) {
							var p = ps[i];
							for(var key in p){
								alert(key+":"+p[key]);
							}
						}
第4节 JSON_解析器
	1、JSON_解析器Jackson_java对象转json
		1、JSON解析器：
			常见的解析器：Jsonlib，Gson，fastjson，jackson
		2、Java对象转换JSON
			1. 使用步骤：
				1. 导入jackson的相关jar包
				2. 创建Jackson核心对象 ObjectMapper
				3. 调用ObjectMapper的相关方法进行转换
					1. 转换方法：
						1、writeValue(参数，obj):
		                    参数：
		                        File：将obj对象转换为JSON字符串，并保存到指定的文件中
		                        Writer：将obj对象转换为JSON字符串，并将json数据填充到字符输出流中
		                        OutputStream：将obj对象转换为JSON字符串，并将json数据填充到字节输出流中
		                2、writeValueAsString(obj):将对象转为json字符串
	2、JSON_解析器Jackson_java对象转json_注解
		1、在JavaBean类中的成员变量上面添加注解：
			1. @JsonIgnore：排除属性。之后进行Java对象转JSON字符串时会忽略给成员变量
			2. @JsonFormat：属性值得格式化。按照对应的格式进行格式化
				@JsonFormat(pattern = "yyyy-MM-dd")
	3、JSON_解析器Jackson_java对象转json_List&Map
		复杂java对象转换
			1. List：转换后为数组中包含对象的字符串格式
				[{},{},{}...]
			2. Map：转换后与Java对象转换后的格式一致
				{"","","","","",""}
	4、JSON_解析器Jackson_json转Java对象
		1. 导入jackson的相关jar包
		2. 创建Jackson核心对象 ObjectMapper
		3. 调用ObjectMapper的相关方法进行转换
			1. readValue(json字符串数据,Class)
	5、案例_校验用户名是否存在
		校验用户名是否存在
		1、服务器响应的数据，在客户端使用时，要想当做json数据格式使用。有两种解决方案：
			1. $.get(type):将最后一个参数type指定为"json"
			2. 在服务器端设置MIME类型
				response.setContentType("application/json;charset=utf-8");
		2、响应数据乱码问题：
			在服务器端设置MIME类型：response.setContentType("application/json;charset=utf-8");