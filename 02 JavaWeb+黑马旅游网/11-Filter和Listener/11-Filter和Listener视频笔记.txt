第1节 Filter快速入门
	1、今日内容(JavaWeb三大组件：Servlet、Filter、Listener)
		1. Filter：过滤器
		2. Listener：监听器
	2、Filter_概述
		概念：
		1、生活中的过滤器：净水器,空气净化器，土匪、
		2、web中的过滤器：当访问服务器的资源时，过滤器可以将请求拦截下来，完成一些特殊的功能。
		3、过滤器的作用：
			一般用于完成通用的操作。如：登录验证、统一编码处理、敏感字符过滤...
	3、Filter_快速入门
		1. 步骤：
			1. 定义一个类，实现接口Filter
			2. 复写方法(init(),doFilter(),destroy())
			3. 配置拦截路径
				1. web.xml
				2. 配置注解(@WebFilter("/*"))
				
			4、注意使用了过滤器后要考虑放不放行
				//放行：在doFilter方法中调用filterChain对象的doFilter方法
			    filterChain.doFilter(servletRequest,servletResponse);
		2. 代码：
			@WebFilter("/*")//访问所有资源之前，都会执行该过滤器
			public class FilterDemo1 implements Filter {
			    @Override
			    public void init(FilterConfig filterConfig) throws ServletException {
			    }
			    @Override
			    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
			        System.out.println("filterDemo1被执行了....");
			        //放行
			        filterChain.doFilter(servletRequest,servletResponse);
			    }
			    @Override
			    public void destroy() {
			    }
			}
第2节 Filter细节
	1、Filter_细节_web.xml配置方式(在WEB-INF目录下有一个web.xml)
		<filter>
			<filter-name>demo1</filter-name>
			<filter-class>cn.itcast.web.filter.FilterDemo1</filter-class>
		</filter>
		<filter-mapping>
			<filter-name>demo1</filter-name>
			<!-- 拦截路径 -->
			<url-pattern>/*</url-pattern>
		</filter-mapping>
	2、Filter_细节_执行流程&生命周期
		1、存在过滤器的执行流程：
			1、请求资源过程中会先执行过滤的doFilter方法(对request请求消息的增强)
			2、被放行后会执行请求的资源
			3、执行完请求的资源后,会执行过滤器中放行后的代码内容(对response对象的响应消息增强)
		2、过滤器生命周期方法
			1. init:在服务器启动后，会创建Filter对象，然后调用init方法。只执行一次。用于加载资源
			2. doFilter:每一次请求被拦截资源时，会执行。执行多次
			3. destroy:在服务器关闭后，Filter对象被销毁。如果服务器是正常关闭，则会执行destroy方法。只执行一次。用于释放资源
	3、Filter_细节_过滤器拦截路径配置
		拦截路径配置：
			1. 具体资源路径： 	/index.jsp   	只有访问index.jsp资源时，过滤器才会被执行
			2. 拦截目录： 		/user/*			访问/user下的所有资源时，过滤器都会被执行
			3. 后缀名拦截： 	*.jsp			访问所有后缀名为jsp资源时，过滤器都会被执行
			4. 拦截所有资源：	/*				访问所有资源时，过滤器都会被执行
	4、Filter_细节_过滤器拦截方式配置
		拦截方式配置：资源被访问的方式
			1、注解配置：
				1、设置dispatcherTypes属性
					1. REQUEST：默认值。浏览器直接请求资源
					2. FORWARD：转发访问资源
					3. INCLUDE：包含访问资源
					4. ERROR：错误跳转资源
					5. ASYNC：异步访问资源
					
					注意这五个值是枚举类型,需要使用DispatcherType来调用这五个值
				2、例子：
					@WebFilter(value="/index.jsp",dispatcherTypes={DispatcherType.FORWARD,DispatcherType.REQUEST})
					这样既可以过滤请求的方式也可以过滤转发的方式
			2、web.xml配置
				在web.xml中设置<dispatcher></dispatcher>标签即可里面也有5个值
	5、Filter_细节_过滤器链(多个过滤器)
		过滤器链(配置多个过滤器)
			1、执行顺序：如果有两个过滤器：过滤器1和过滤器2
				1. 过滤器1
				2. 过滤器2
				3. 资源执行
				4. 过滤器2
				5. 过滤器1 

			2、过滤器先后顺序问题：
				1. 注解配置：按照类名的字符串比较规则比较，值小的先执行
					如： AFilter 和 BFilter，AFilter就先执行了。
				2. web.xml配置： <filter-mapping>谁定义在上边，谁先执行
第3节 Filter案例
	1、Filter_案例1_登录验证_分析
		案例1_登录验证
			1、需求：
				1. 访问day17_case案例的资源。验证其是否登录
				2. 如果登录了，则直接放行。
				3. 如果没有登录，则跳转到登录页面，提示"您尚未登录，请先登录"。
			2、分析：
				1、登录验证的过滤器的过滤路径是"/*"
				2、先判断是否是登录相关的资源
					1、是：直接放行
					2、不是：判断是否登录
				3、判断当前用户是否登录：
					1、有：已经登录,放行
					2、没有：没有登录,跳转到登录页面(先使用request记录错误信息,再使用request转发到登录界面)
	2、Filter_案例1_登录验证_代码实现
		注意事项：
			1、过滤器中想要获取请求路径需要把ServletRequest强转为HttpServletRequest
			2、判断是否包含登录相关资源路径,要注意排除掉css/js/图片/验证码等资源
	3、Filter_案例2_过滤敏感词汇_分析
		案例2_敏感词汇过滤
			1、需求：
				1. 对day17_case案例录入的数据进行敏感词汇过滤
				2. 敏感词汇参考《敏感词汇.txt》
				3. 如果是敏感词汇，替换为 *** 

			2、分析：
				1. 对request对象的getParameter方法进行增强。产生一个新的request对象
				2. 放行并将新的request对象传入放行方法(传递代理对象)
					(使用动态代理对象增强request对象的getParameter方法,返回的是request对象)
				
				过滤器的操作很简单,难点就是对request对象的getParameter方法增强。
				
			3、注意事项：
				1、过滤器中的request对象和servlet对象中的request对象是同一个对象,所以可以在过滤器放行之前执行过滤操作。
					然后把过滤后的request对象传递给放行方法
				2、获取request的参数信息是使用getParameter方法,但是request对象没有设置参数信息的方法
	4、动态代理1_基本实现步骤
		增强对象的功能：
			1、设计模式：一些通用的解决固定问题的方式
				1. 装饰模式：动态的给一个对象添加一些额外的职责，就增加功能来说,装饰模式相比生成子类更加灵活
				2. 代理模式：为其他对象提供一种代理以控制对这个对象的访问
			2、代理模式解析：
				1、概念：
					1. 真实对象：被代理的对象
					2. 代理对象：新生成的代理对象
					3. 代理模式：代理对象代理真实对象，达到增强真实对象功能的目的
				2、实现方式：
					1. 静态代理：有一个类文件描述代理模式
					2. 动态代理：在内存中形成代理类
						1、实现步骤：
							1. 代理对象和真实对象实现相同的接口
							2. 代理对象 = Proxy.newProxyInstance();
							3. 使用代理对象调用方法。
							4. 增强方法

						2、增强方式：
							1. 增强参数列表
							2. 增强返回值类型
							3. 增强方法体执行逻辑

				3、代理模式案例编写：
					1、代理对象和真实对象共同实现的接口：
						package cn.itcast.proxy;
						public interface SaleComputer {
							public String sale(double money);
							public void show();
						}
					2、真实对象类的编写：
						package cn.itcast.proxy;
						/**
						 * 真实类
						 */
						public class Lenovo implements SaleComputer {
							@Override
							public String sale(double money) {
								System.out.println("花了"+money+"元买了一台联想电脑...");
								return "联想电脑";
							}
							@Override
							public void show() {
								System.out.println("展示电脑....");
							}
						}
					3、代理对象类的编写：
					
					//*1*.创建真实对象
					Lenovo lenovo = new Lenovo();
					
					
					//*2*.动态代理增强lenovo对象(包含1、创建代理对象的方法的编写;2、创建代理对象方法的核心重载方法的编写)
					/*
						1、Proxy.newProxyInstance()方法的三个参数：
							1. 类加载器：真实对象.getClass().getClassLoader()
							2. 接口数组：真实对象.getClass().getInterfaces()
							3. 处理器：new InvocationHandler()
					 */
					SaleComputer proxy_lenovo = (SaleComputer) Proxy.newProxyInstance(lenovo.getClass().getClassLoader(), lenovo.getClass().getInterfaces(), new InvocationHandler() {
						/*
							2、代理逻辑编写的方法：代理对象调用的所有方法都会触发该方法执行
								参数：
									1. proxy:代理对象
									2. method：代理对象调用的方法，被封装为的对象
									3. args:代理对象调用的方法时，传递的实际参数
						 */
						@Override
						public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
							if(method.getName().equals("sale")){
								//1、增强参数
								Double money = (Double) args[0] * 0.85;
								
								//3、增强方法体
								System.out.println("专车接机");
								Object obj = method.invoke(lenovo, money);
								System.out.println("免费包邮");
								
								//2、增强返回值
								return obj+"_鼠标垫";
							}else{
								Object obj = method.invoke(lenovo, args);
								return obj;
							}
						}
					});
					
					
					//*3*.调用代理对象方法
					String sale = proxy_obj.sale(8000);
					System.out.println(sale);
					proxy_lenovo.show();
	5、动态代理2_增强方法
		增强方式：
			1. 增强参数列表
			2. 增强返回值类型
			3. 增强方法体执行逻辑
	6、Filter_案例2_过滤敏感词汇_实现(核心是增强方法的实现)
		1、创建代理对象,增强getParameter方法
			1、使用Proxy.newProxyInstance()方法来创建代理对象,并把方法返回代理对象强制转为ServletRequest对象。
			2、在代理处理器的核心方法中进行增强方法的编写
				1、判断是否是要增强的方法
				2、获取真实对象的方法的返回值
				3、读取配置文件生成一个敏感词汇的List数组(在init方法中:1、获取文件路径;2、读取文件;3、将文件的每一行数据添加到list集合中)
				4、先判断value是否为空再遍历list集合获取每一个敏感词汇
				5、判断value是否包含敏感词汇再使用返回值字符串替换每一个敏感词汇为***;value.replaceAll(str,"***");
				6、返回替换后的返回值
		2、放行
			1、调用过滤器的放行方法(),并把代理对象作为参数传递给放行函数
第4节 监听器
	1、Listener_概述
		1、概念：web的三大组件之一。
		2、事件监听机制
			1、事件	：一件事情(例如:单击动作)
			2、事件源 ：事件发生的地方(例如:按钮)
			3、监听器 ：一个对象(例如:一段事件代码)
			4、注册监听：将事件、事件源、监听器绑定在一起。 当事件源上发生某个事件后，执行监听器代码
				例如:把按钮注册一个监听器


		3、ServletContextListener:监听ServletContext对象的创建和销毁
			方法：
				1、void contextDestroyed(ServletContextEvent sce) ：ServletContext对象被销毁之前会调用该方法
				2、void contextInitialized(ServletContextEvent sce) ：ServletContext对象创建后会调用该方法
	2、Listener_ServletContextListener的使用
		1、使用场景：加载全局的配置文件
		2、步骤：
			1. 定义一个类，实现ServletContextListener接口
			2. 复写方法
			3. 配置监听器
				1. web.xml
						<listener>
     					 <listener-class>cn.itcast.web.listener.ContextLoaderListener</listener-class>
   						</listener>
				2. 注解：
					直接在监听器上面加这段代码：@WebListener
					
		3、加载全局配置文件的监听器编写
			1、在src目录下创建一个全局配置文件(applicationContext.xml)
			2、在web.xml的文件中指定初始化参数
				<!-- 指定初始化参数 -->
				<context-param>
					<param-name>contextConfigLocation</param-name>
					<param-value>/WEB-INF/classes/applicationContext.xml</param-value>
				</context-param>
			3、在监听器的初始化方法中编写
				1、获取ServletContext对象
					ServletContext servletContext = servletContextEvent.getServletContext();
				2、加载资源文件
					String contextConfigLocation = servletContext.getInitParameter("contextConfigLocation");
				3、获取真实路径
					String realPath = servletContext.getRealPath(contextConfigLocation);
				4、加载进内存
					try{
						FileInputStream fis = new FileInputStream(realPath);
					}catch (Exception e){
						e.printStackTrace();
					}
		