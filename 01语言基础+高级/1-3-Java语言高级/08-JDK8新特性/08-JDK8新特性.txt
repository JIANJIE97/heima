1、主要内容
	自定义函数式接口
	函数式编程
	常用函数式接口
2、教学目标
	1、能够使用@FunctionalInterface注解
	2、能够自定义无参无返回函数式接口
	3、能够自定义有参有返回函数式接口
	4、能够理解Lambda延迟执行的特点
	5、能够使用Lambda作为方法的参数
	6、能够使用Lambda作为方法的返回值
	7、能够使用Supplier函数式接口(T get())
	8、能够使用Consumer函数式接口(void accept(T t) 和 default Consumer<T> andThen(Consumer<? super T> after))
	9、能够使用Function函数式接口
		1、R apply(T t)
		2、default <V> Function<T,V> andThen​(Function<? super R,? extends V> after)
	10、能够使用Predicate函数式接口
		1、boolean test(T t)
		2、default Predicate<T> and(Predicate<? super T> other)
		3、default Predicate<T> or(Predicate<? super T> other)
		4、default Predicate<T> negate()
















第1节 常用函数接口
	1、函数式接口的概念&函数式接口的定义
		1、函数式接口的概念:
			1、有且只有一个抽象方法的接口,称之为函数式接口。当然接口中可以包含其他的方法(默认,静态,私有)
			2、函数式接口，即适用于函数式编程场景的接口。而Java中的函数式编程体现就是Lambda，所以函数式接口就是可
				以适用于Lambda使用的接口。只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利地进行推导。（JAVA的函数式编程是lambda）
				
			3、备注：“语法糖”是指使用更加方便，但是原理不变的代码语法。
				例如在遍历集合时使用的for-each语法，其实底层的实现原理仍然是迭代器，这便是“语法糖”。
				从应用层面来讲，Java中的Lambda可以被当做是匿名内部类的“语法糖”，但是二者在原理上是不同的。（迭代器与foreach循环、匿名内部类与Lambda表达式）
				
				匿名内部类与Lambda表达式原理的不同点：
					使用匿名内部类后，会形成一个class文件。而lambda不会形成class文件,所以相比之下使用Lambda表达式不用加载class文件效率更高

		2、函数式接口的定义:
			1、@FunctionalInterface注解
				作用:可以检测接口是否是一个函数式接口
				是:编译成功
				否:编译失败(接口中没有抽象方法抽象方法的个数多余1个)
			2、代码案例
				public interface MyFunctionalInterface {
					//定义一个抽象方法
					public abstract void method();
				}
	2、函数式接口的使用
		1、函数式接口的使用:一般可以作为方法的参数和返回值类型。注意该方法的参数必须是一个接口或者函数式接口才行
			1、传递接口的实现类对象
			2、传递接口的匿名内部类
			3、使用Lambda表达式(参数是函数式接口才可以使用)
			4、使用简化版本的Lambda表达式(参数是函数式接口才可以使用)
	3、性能浪费的日志案例
		
		1、日志案例：发现以下代码存在的一些性能浪费的问题,调用showLog方法,传递的第二个参数是一个拼接后的字符串
			先把字符串拼接好,然后再调用showLog方法。showLog方法中如果传递的日志等级不是1级，那么就不会打印拼接后的字符串。
			所以感觉字符串就白拼接了,存在了浪费
			(也有解决方法，例如先不拼接，把字符串作为参数传递,符合条件后再拼接。这也是一种可行解决方案，但Lambda可以做到更好。)
			
		2、Lambda的延迟执行：有些场景的代码执行后，结果不一定会被使用，从而造成性能浪费。而Lambda表达式是延迟执行的，这正好可以
			作为解决方案，提升性能。
			
		3、代码案例:
			//定义一个根据日志的级别,显示日志信息的方法
			public static void showLog(int level, String message){
				//对日志的等级进行判断,如果是1级别,那么输出日志信息
				if(level==1){
					System.out.println(message);
				}
			}

			public static void main(String[] args) {
				//定义三个日志信息
				String msg1 = "Hello";
				String msg2 = "World";
				String msg3 = "Java";

				//调用showLog方法,传递日志级别和日志信息
				showLog(2,msg1+msg2+msg3);

			}
	4、使用Lambda优化日志案例
		1、使用Lambda优化日志案例
			1、Lambda的特点:延迟加载(使用函数式接口作为方法的参数,只有符合条件的才执行接口的抽象方法)
			2、Lambda的使用前提,必须存在函数式接口
			
		2、使用Lambda表达式作为参数传递,仅仅是把参数传递到showLog方法中
            1、只有满足条件(日志的等级是1级)
                才会调用接口MessageBuilder中的方法builderMessage,才会进行字符串的拼接
            2、如果条件不满足(日志的等级不是1级)
                那么MessageBuilder接口中的方法builderMessage也不会执行,所以拼接字符串的代码也不会执行,所以不会存在性能的浪费
				
				
				
		3、代码案例：
			1、测试类：
				//定义一个显示日志的方法,方法的参数传递日志的等级和MessageBuilder接口
				public static void showLog(int level, MessageBuilder mb){
					//对日志的等级进行判断,如果是1级,则调用MessageBuilder接口中的builderMessage方法
					if(level==1){
						System.out.println(mb.builderMessage());
					}
				}
				public static void main(String[] args) {
					//定义三个日志信息
					String msg1 = "Hello";
					String msg2 = "World";
					String msg3 = "Java";

					//调用showLog方法,参数MessageBuilder是一个函数式接口,所以可以传递Lambda表达式
					showLog(1,()->{
						return  msg1+msg2+msg3;
					});
				}
				
			2、接口：
				@FunctionalInterface
				public interface MessageBuilder {
					//定义一个拼接消息的抽象方法,返回被拼接的消息
					public abstract String builderMessage();
				}
	5、函数式接口作为方法的参数案例(Runnable接口)
		1、例如java.lang.Runnable接口就是一个函数式接口，假设有一个startThread方法使用该接口作为参数，那么就可以使用Lambda进行传参。
			这种情况其实和Thread类的构造方法参数为Runnable没有本质区别。
		2、代码案例：
			//定义一个方法startThread,方法的参数使用函数式接口Runnable
			public static void startThread(Runnable run){
				//开启多线程
				new Thread(run).start();
			}

			public static void main(String[] args) {
				//调用startThread方法,方法的参数是一个接口,那么我们可以传递这个接口的匿名内部类
				startThread(new Runnable() {
					@Override
					public void run() {
						System.out.println(Thread.currentThread().getName()+"-->"+"线程启动了");
					}
				});

				//调用startThread方法,方法的参数是一个函数式接口,所以可以传递Lambda表达式
				startThread(()->{
					System.out.println(Thread.currentThread().getName()+"-->"+"线程启动了");
				});

				//优化Lambda表达式
				startThread(()->System.out.println(Thread.currentThread().getName()+"-->"+"线程启动了"));
			}
	6、函数式接口作为方法的返回值类型案例(Comparator接口:比较器接口)
		1、如果一个方法的返回值类型是一个函数式接口，那么就可以直接返回一个Lambda表达式。
			例如：当需要通过一个方法来获取一个java.util.Comparator接口类型的对象作为排序器时,就可以调该方法获取。
		2、代码案例：
			//定义一个方法,方法的返回值类型使用函数式接口Comparator
			public static Comparator<String> getComparator(){
				//1、方法的返回值类型是一个接口,那么我们可以返回这个接口的匿名内部类
				/*
				return new Comparator<String>() {
					@Override
					public int compare(String o1, String o2) {
						//按照字符串的降序排序
						return o2.length()-o1.length();
					}
				};
				*/

				//2、方法的返回值类型是一个函数式接口,所有我们可以返回一个Lambda表达式
				/*
				return (String o1, String o2)->{
					//按照字符串的降序排序
					return o2.length()-o1.length();
				};
				*/

				//3、继续优化Lambda表达式
				return (o1, o2)->o2.length()-o1.length();
			}

			public static void main(String[] args) {
				//创建一个字符串数组
				String[] arr = {"aaa","b","cccccc","dddddddddddd"};
				//输出排序前的数组
				System.out.println(Arrays.toString(arr));//[aaa, b, cccccc, dddddddddddd]
				//调用Arrays中的sort方法,对字符串数组进行排序
				Arrays.sort(arr,getComparator());
				//输出排序后的数组
				System.out.println(Arrays.toString(arr));//[dddddddddddd, cccccc, aaa, b]
			}
		3、常用的函数式接口
			1、JDK提供了大量常用的函数式接口以丰富Lambda的典型使用场景，它们主要在 java.util.function 包中被提供。
				下面是最简单的几个接口及使用示例。
				1、Supplier<T>接口:被称之为生产型接口,指定接口的泛型是什么类型,那么接口中的get方法就会生产什么类型的数据
				2、Consumer<T>接口:与Supplier接口相反，它不是生产一个数据，而是消费一个数据，其数据类型由泛型决定。
				3、Predicate<T>接口:对某种数据类型的数据进行判断,结果返回一个boolean值
				4、Function<T,R>接口:用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件，后者称为后置条件。
	7、常用的函数式接口_Supplier接口
		1、java.util.function.Supplier<T>接口仅包含一个无参的方法：T get()。用来获取一个泛型参数指定类型的对象数据。
			Supplier<T>接口被称之为生产型接口,指定接口的泛型是什么类型,那么接口中的get方法就会生产什么类型的数据
		2、代码案例：
			 //定义一个方法,方法的参数传递Supplier<T>接口,泛型执行String,get方法就会返回一个String
			public static String getString(Supplier<String> sup){
				return sup.get();
			}

			public static void main(String[] args) {
				//调用getString方法,方法的参数Supplier是一个函数式接口,所以可以传递Lambda表达式
				String s = getString(()->{
					//生产一个字符串,并返回
					return "胡歌1";
				});
				System.out.println(s);

				//优化Lambda表达式
				String s2 = getString(()->"胡歌2");
				System.out.println(s2);
			}
	8、常用的函数式接口_Supplier接口练习_求数组元素最大值
		1、练习：求数组元素最大值
			使用Supplier接口作为方法参数类型，通过Lambda表达式求出int数组中的最大值。
			提示：接口的泛型请使用java.lang.Integer类。
			
		2、代码案例：
			//定义一个方法,用于获取int类型数组中元素的最大值,方法的参数传递Supplier接口,泛型使用Integer
		   public static int getMax(Supplier<Integer> sup){
			   return sup.get();
		   }

			public static void main(String[] args) {
				//定义一个int类型的数组,并赋值
				int[] arr = {100,0,-50,880,99,33,-30};
				//调用getMax方法,方法的参数Supplier是一个函数式接口,所以可以传递Lambda表达式
				int maxValue = getMax(()->{
					//获取数组的最大值,并返回
					//定义一个变量,把数组中的第一个元素赋值给该变量,记录数组中元素的最大值
					int max = arr[0];
					//遍历数组,获取数组中的其他元素
					for (int i : arr) {
						//使用其他的元素和最大值比较
						if(i>max){
							//如果i大于max,则替换max作为最大值
							max = i;
						}
					}
					//返回最大值
					return max;
				});
				System.out.println("数组中元素的最大值是:"+maxValue);
			}
	9、常用的函数式接口_Consumer接口
		1、java.util.function.Consumer<T>接口则正好与Supplier接口相反，
			它不是生产一个数据，而是消费一个数据，其数据类型由泛型决定。
		2、Consumer接口中包含抽象方法void accept(T t)，意为消费一个指定泛型的数据。
		3、Consumer接口是一个消费型接口,泛型执行什么类型,就可以使用accept方法消费什么类型的数据
			至于具体怎么消费(使用),需要自定义(输出,计算....)
			
			
			
		4、案例代码：
			public static void method(String name, Consumer<String> con){
				con.accept(name);
			}

			public static void main(String[] args) {
				//调用method方法,传递字符串姓名,方法的另一个参数是Consumer接口,是一个函数式接口,所以可以传递Lambda表达式
				method("赵丽颖",(String name)->{
					//对传递的字符串进行消费
					//消费方式:把字符串进行反转输出
					String reName = new StringBuffer(name).reverse().toString();
					System.out.println(reName);
				});
			}
	10、常用的函数式接口_Consumer接口的默认方法andThen
		1、如果一个方法的参数和返回值全都是 Consumer 类型，那么就可以实现效果：消费数据的时候，首先做一个操作，
			然后再做一个操作，实现组合。而这个方法就是 Consumer 接口中的default方法 andThen 。下面是JDK的源代码：
			default Consumer<T> andThen(Consumer<? super T> after) {
				Objects.requireNonNull(after);
				return (T t) ‐> { accept(t); after.accept(t); };
			}
			
			备注： java.util.Objects 的 requireNonNull 静态方法将会在参数为null时主动抛出
			NullPointerException 异常。这省去了重复编写if语句和抛出空指针异常的麻烦。
		2、例如:
				Consumer<String> con1
				Consumer<String> con2
				String s = "hello";
			1、常用方法：
				con1.accept(s);
				con2.accept(s);
			2、andThen默认方法：连接两个Consumer接口  再进行消费
				con1.andThen(con2).accept(s); 谁写前边谁先消费
				
		3、代码案例：
			import java.util.function.Consumer;
			
			public class Demo10ConsumerAndThen {
				private static void consumeString(Consumer<String> one, Consumer<String> two) {
					one.andThen(two).accept("Hello");
				}
				public static void main(String[] args) {
					consumeString(
						s ‐> System.out.println(s.toUpperCase()),
						s ‐> System.out.println(s.toLowerCase()));
				}
			}
			
			运行结果将会首先打印完全大写的HELLO，然后打印完全小写的hello。当然，通过链式写法可以实现更多步骤的组合。
	11、常用的函数式接口_Consumer接口练习_字符串拼接输出
		1、练习:
			字符串数组当中存有多条信息，请按照格式“姓名：XX。性别：XX。”的格式将信息打印出来。
			要求将打印姓名的动作作为第一个Consumer接口的Lambda实例，
			将打印性别的动作作为第二个Consumer接口的Lambda实例，
			将两个Consumer接口按照顺序“拼接”到一起。
			
		2、代码案例：
			import java.util.function.Consumer;
			
			public class DemoConsumer {
				public static void main(String[] args) {
					String[] array = { "迪丽热巴,女", "古力娜扎,女", "马尔扎哈,男" };
					printInfo(s ‐> System.out.print("姓名：" + s.split(",")[0]),
							  s ‐> System.out.println("。性别：" + s.split(",")[1] + "。"),
							  array);
				}
				private static void printInfo(Consumer<String> one, Consumer<String> two, String[] array) {
					for (String info : array) {
						one.andThen(two).accept(info); // 姓名：迪丽热巴。性别：女。
					}
				}
			}
	12、常用的函数式接口_Predicate接口
		1、java.util.function.Predicate<T>接口
			作用:对某种数据类型的数据进行判断,结果返回一个boolean值
			
		2、Predicate接口中包含一个抽象方法：
			1、boolean test(T t):用来对指定数据类型数据进行判断的方法
            2、结果:
                符合条件,返回true
                不符合条件,返回false
				
				
		3、代码案例：
			public static boolean checkString(String s, Predicate<String> pre){
				return  pre.test(s);
			}

			public static void main(String[] args) {
				//定义一个字符串
				String s = "abcdef";

				//1、调用checkString方法对字符串进行校验,参数传递字符串和Lambda表达式
				/*
				boolean b = checkString(s,(String str)->{
					//对参数传递的字符串进行判断,判断字符串的长度是否大于5,并把判断的结果返回
					return str.length()>5;
				});
				*/

				/2、/优化Lambda表达式
				boolean b = checkString(s,str->str.length()>5);
				System.out.println(b);
			}
	13、常用的函数式接口_Predicate接口_默认方法and
		1、逻辑表达式:可以连接多个判断的条件
			&&:与运算符,有false则false
			||:或运算符,有true则true
			!:非(取反)运算符,非真则假,非假则真

		2、需求:判断一个字符串,有两个判断的条件
			1.判断字符串的长度是否大于5
			2.判断字符串中是否包含a
			两个条件必须同时满足,我们就可以使用&&运算符连接两个条件

		3、Predicate接口中有一个方法and,表示并且关系,也可以用于连接两个判断条件
			default Predicate<T> and(Predicate<? super T> other) {
				Objects.requireNonNull(other);
				return (t) -> this.test(t) && other.test(t);
			}
			方法内部的两个判断条件,也是使用&&运算符连接起来的
		4、代码案例：
			public static boolean checkString(String s, Predicate<String> pre1,Predicate<String> pre2){
				//return pre1.test(s) && pre2.test(s);
				return pre1.and(pre2).test(s);//等价于return pre1.test(s) && pre2.test(s);
			}

			public static void main(String[] args) {
				//定义一个字符串
				String s = "abcdef";
				//调用checkString方法,参数传递字符串和两个Lambda表达式
				boolean b = checkString(s,(String str)->{
					//判断字符串的长度是否大于5
					return str.length()>5;
				},(String str)->{
					//判断字符串中是否包含a
					return str.contains("a");
				});
				System.out.println(b);
			}
	14、常用的函数式接口_Predicate接口_默认方法or&negate
		1、Predicate接口中有一个方法or,表示或者关系,也可以用于连接两个判断条件
			default Predicate<T> or(Predicate<? super T> other) {
				Objects.requireNonNull(other);
				return (t) -> test(t) || other.test(t);
			}
			方法内部的两个判断条件,也是使用||运算符连接起来的
			
		2、or代码案例：
			public static boolean checkString(String s, Predicate<String> pre1,Predicate<String> pre2){
				//return pre1.test(s) || pre2.test(s);
				return pre1.or(pre2).test(s);//等价于return pre1.test(s) || pre2.test(s);
			}

			public static void main(String[] args) {
				//定义一个字符串
				String s = "abcdef";
				//调用checkString方法,参数传递字符串和两个Lambda表达式
				boolean b = checkString(s,(String str)->{
					//判断字符串的长度是否大于5
					return str.length()>5;
				},(String str)->{
					//判断字符串中是否包含a
					return str.contains("a");
				});
				System.out.println(b);
				
		3、Predicate接口中有一个方法negate,也表示取反的意思
			default Predicate<T> negate() {
				return (t) -> !test(t);
			}
			
		4、negate方法代码案例：
			public static boolean checkString(String s, Predicate<String> pre){
				//return !pre.test(s);
				return  pre.negate().test(s);//等效于return !pre.test(s);
			}

			public static void main(String[] args) {
				//定义一个字符串
				String s = "abc";
				//调用checkString方法,参数传递字符串和Lambda表达式
				boolean b = checkString(s,(String str)->{
					//判断字符串的长度是否大于5,并返回结果
					return str.length()>5;
				});
				System.out.println(b);
			}
	15、常用的函数式接口_Predicate接口练习_集合信息筛选
		1、练习：集合信息筛选
			数组当中有多条“姓名+性别”的信息如下，
			String[] array = { "迪丽热巴,女", "古力娜扎,女", "马尔扎哈,男", "赵丽颖,女" };
			请通过Predicate接口的拼装将符合要求的字符串筛选到集合ArrayList中，
			需要同时满足两个条件：
				1. 必须为女生；
				2. 姓名为4个字。

		2、分析:
			1.有两个判断条件,所以需要使用两个Predicate接口,对条件进行判断
			2.必须同时满足两个条件,所以可以使用and方法连接两个判断条件
		3、案例代码：
			public static ArrayList<String> filter(String[] arr,Predicate<String> pre1,Predicate<String> pre2){
				//定义一个ArrayList集合,存储过滤之后的信息
				ArrayList<String> list = new ArrayList<>();
				//遍历数组,获取数组中的每一条信息
				for (String s : arr) {
					//使用Predicate接口中的方法test对获取到的字符串进行判断
					boolean b = pre1.and(pre2).test(s);
					//对得到的布尔值进行判断
					if(b){
						//条件成立,两个条件都满足,把信息存储到ArrayList集合中
						list.add(s);
					}
				}
				//把集合返回
				return list;
			}

			public static void main(String[] args) {
				//定义一个储存字符串的数组
				String[] array = { "迪丽热巴,女", "古力娜扎,女", "马尔扎哈,男", "赵丽颖,女" };
				//调用filter方法,传递字符串数组和两个Lambda表达式
				ArrayList<String> list = filter(array,(String s)->{
					//获取字符串中的性别,判断是否为女
				   return s.split(",")[1].equals("女");
				},(String s)->{
					//获取字符串中的姓名,判断长度是否为4个字符
				   return s.split(",")[0].length()==4;
				});
				//遍历集合
				for (String s : list) {
					System.out.println(s);
				}
			}
	16、常用的函数式接口_Function接口
		1、java.util.function.Function<T,R>接口用来根据一个类型的数据得到另一个类型的数据，
			前者称为前置条件，后者称为后置条件。
		2、Function接口中最主要的抽象方法为：R apply(T t)，根据类型T的参数获取类型R的结果。
			使用的场景例如：将String类型转换为Integer类型。
			
		3、案例代码：
			/*
				定义一个方法
				方法的参数传递一个字符串类型的整数
				方法的参数传递一个Function接口,泛型使用<String,Integer>
				使用Function接口中的方法apply,把字符串类型的整数,转换为Integer类型的整数
			 */
			public static void change(String s, Function<String,Integer> fun){
				//Integer in = fun.apply(s);
				int in = fun.apply(s);//自动拆箱 Integer->int
				System.out.println(in);
			}

			public static void main(String[] args) {
				//定义一个字符串类型的整数
				String s = "1234";
				//调用change方法,传递字符串类型的整数,和Lambda表达式
				change(s,(String str)->{
					//把字符串类型的整数,转换为Integer类型的整数返回
					return Integer.parseInt(str);
				});
				//优化Lambda
				change(s,str->Integer.parseInt(str));
			}
	17、常用的函数式接口_Function接口_默认方法andThen
		1、Function接口中的默认方法andThen:用来进行组合操作
			default <V> Function<T,V> andThen​(Function<? super R,? extends V> after)
		2、需求:
			把String类型的"123",转换为Inteter类型,把转换后的结果加10
			把增加之后的Integer类型的数据,转换为String类型

		3、分析:
			转换了两次
			第一次是把String类型转换为了Integer类型
				所以我们可以使用Function<String,Integer> fun1
					Integer i = fun1.apply("123")+10;
			第二次是把Integer类型转换为String类型
				所以我们可以使用Function<Integer,String> fun2
					String s = fun2.apply(i);
			我们可以使用andThen方法,把两次转换组合在一起使用
				String s = fun1.andThen(fun2).apply("123");
				fun1先调用apply方法,把字符串转换为Integer
				fun2再调用apply方法,把Integer转换为字符串
		4、案例代码：
			/*
				定义一个方法
				参数串一个字符串类型的整数
				参数再传递两个Function接口
					一个泛型使用Function<String,Integer>
					一个泛型使用Function<Integer,String>
			 */
			public static void change(String s, Function<String,Integer> fun1,Function<Integer,String> fun2){
				String ss = fun1.andThen(fun2).apply(s);
				System.out.println(ss);
			}

			public static void main(String[] args) {
				//定义一个字符串类型的整数
				String s = "123";
				//调用change方法,传递字符串和两个Lambda表达式
				change(s,(String str)->{
					//把字符串转换为整数+10
					return Integer.parseInt(str)+10;
				},(Integer i)->{
					//把整数转换为字符串
					return i+"";
				});

				//优化Lambda表达式
				change(s,str->Integer.parseInt(str)+10,i->i+"");
			}
	18、常用的函数式接口_Function接口练习_自定义函数模型拼接
		1、练习：自定义函数模型拼接
			请使用Function进行函数模型的拼接，按照顺序需要执行的多个函数操作为：
				String str = "赵丽颖,20";

		2、分析:
			1. 将字符串截取数字年龄部分，得到字符串；
				Function<String,String> "赵丽颖,20"->"20"
			2. 将上一步的字符串转换成为int类型的数字；
				Function<String,Integer> "20"->20
			3. 将上一步的int数字累加100，得到结果int数字。
				Function<Integer,Integer> 20->120
				
		3、案例代码：
			/*
				定义一个方法
				参数传递包含姓名和年龄的字符串
				参数再传递3个Function接口用于类型转换
			 */
			public static int change(String s, Function<String,String> fun1,
									 Function<String,Integer> fun2,Function<Integer,Integer> fun3){
				//使用andThen方法把三个转换组合到一起
				return fun1.andThen(fun2).andThen(fun3).apply(s);
			}

			public static void main(String[] args) {
				//定义一个字符串
				String str = "赵丽颖,20";
				//调用change方法,参数传递字符串和3个Lambda表达式
				int num = change(str,(String s)->{
					//"赵丽颖,20"->"20"
				   return s.split(",")[1];
				},(String s)->{
					//"20"->20
					return Integer.parseInt(s);
				},(Integer i)->{
					//20->120
					return i+100;
				});
				System.out.println(num);
			}
			
			
			
			
			
	主要内容
		1、Stream流
		2、方法引用
	教学目标
		1、能够理解流与集合相比的优点
		2、能够理解流的延迟执行特点
		3、能够通过集合、映射或数组获取流
		4、能够掌握常用的流操作
		5、能够使用输出语句的方法引用
		6、能够通过4种方式使用方法引用(对象名引用成员方法、类名引用静态方法、super引用父类方法、this引用本累的成员方法)
		7、能够使用类和数组的构造器引用创建对象或数组
第2节 Stream流式思想概述
	1、使用传统的方式,遍历集合,对集合中的数据进行过滤
		1、说到Stream便容易想到I/O Stream，而实际上，谁规定“流”就一定是“IO流”呢？在Java 8中，得益于Lambda所带
			来的函数式编程，引入了一个全新的Stream概念，用于解决已有集合类库既有的弊端。
			
			
		2、循环遍历的弊端：	
			Java 8的Lambda让我们可以更加专注于做什么（What），而不是怎么做（How），这点此前已经结合内部类进行了对比说明。
				现在，我们仔细体会一下上例代码，可以发现：for循环的语法就是“怎么做”;for循环的循环体才是“做什么”;
				为什么使用循环？因为要进行遍历。但循环是遍历的唯一方式吗？
		3、代码案例：使用传统的方式,遍历集合,对集合中的数据进行过滤
			//创建一个List集合,存储姓名
			List<String> list = new ArrayList<>();
			list.add("张无忌");
			list.add("周芷若");
			list.add("赵敏");
			list.add("张强");
			list.add("张三丰");

			//对list集合中的元素进行过滤,只要以张开头的元素,存储到一个新的集合中
			List<String> listA = new ArrayList<>();
			for(String s : list){
				if(s.startsWith("张")){
					listA.add(s);
				}
			}

			//对listA集合进行过滤,只要姓名长度为3的人,存储到一个新集合中
			List<String> listB = new ArrayList<>();
			for (String s : listA) {
				if(s.length()==3){
					listB.add(s);
				}
			}

			//遍历listB集合
			for (String s : listB) {
				System.out.println(s);
			}
	2、使用Stream流的方式,遍历集合,对集合中的数据进行过滤
		1、使用Stream流的方式,遍历集合,对集合中的数据进行过滤
			1、Stream流是JDK1.8之后出现的
			2、关注的是做什么,而不是怎么做
			
		2、代码案例：使用Stream流的方式,遍历集合,对集合中的数据进行过滤
			public static void main(String[] args) {
				//创建一个List集合,存储姓名
				List<String> list = new ArrayList<>();
				list.add("张无忌");
				list.add("周芷若");
				list.add("赵敏");
				list.add("张强");
				list.add("张三丰");

				//对list集合中的元素进行过滤,只要以张开头的元素,存储到一个新的集合中
				//对listA集合进行过滤,只要姓名长度为3的人,存储到一个新集合中
				//遍历listB集合
				list.stream()
					.filter(name->name.startsWith("张"))
					.filter(name->name.length()==3)
					.forEach(name-> System.out.println(name));
			}
			
		3、注意：
			1、集合有一个方法静态Stream(),把集合转换成流
			2、流的过滤方法:Stream<T> filter​(Predicate<? super T> predicate) 
				返回符合此判断条件的元素组成的流。 
			3、流的遍历方法：void forEach​(Consumer<? super T> action)
				对此流的每个元素执行操作。 
	3、_流式思想概述
		1、注意：请暂时忘记对传统IO流的固有印象！整体来看，流式思想类似于工厂车间的“生产流水线”。
		
		2、当需要对多个元素进行操作（特别是多步操作）的时候，考虑到性能及便利性，我们应该首先拼好一个“模型”步骤方案，
			然后再按照方案去执行它。
		3、对多个元素进行操作,如过滤、映射、跳过、计数等多步操作，这是一种集合元素的处理方案，而方案就是一种“函数模
			型”。图中的每一个方框都是一个“流”，调用指定的方法，可以从一个流模型转换为另一个流模型。而最右侧的数字3是最终结果。

		4、这里的 filter 、 map 、 skip 都是在对函数模型进行操作，集合元素并没有真正被处理。只有当终结方法 count
			执行的时候，整个模型才会按照指定策略执行操作。而这得益于Lambda的延迟执行特性。
		
			备注：“Stream流”其实是一个集合元素的函数模型，它并不是集合，也不是数据结构，其本身并不存储任何
				元素（或其地址值）。
				
				
		5、Stream（流）是一个来自数据源(集合或数组)的元素队列
			1、元素是特定类型的对象，形成一个队列。 Java中的Stream并不会存储元素，而是按需计算。
			2、数据源(集合或数组中的元素):Stream流的来源。
			
			
		6、和以前的Collection操作不同， Stream操作还有两个基础的特征：
			1、Pipelining(流水线技术): 中间操作都会返回流对象本身。 这样多个操作可以串联成一个管道， 如同流式风格（fluent style）。 
				这样做可以对操作进行优化， 比如延迟执行(laziness)和短路( short-circuiting)。
			2、内部迭代： 以前对集合遍历都是通过Iterator或者增强for的方式, 显式的在集合外部进行迭代， 这叫做外部迭
				代。 Stream提供了内部迭代的方式，流可以直接调用遍历方法。
		7、当使用一个流的时候，通常包括三个基本步骤：1、获取一个数据源（集合或数组）→ 2、数据转换(数据源转换为Stream流)→3、执行操作获取想要的结
			果(filter\map\skip\count)，每次转换原有 Stream 对象不改变，返回一个新的 Stream 对象（可以有多次转换），这就允许对其操作可以
			像链条一样排列，变成一个管道。


第3节 两种获取Stream流的方式
	
	1、两种获取Stream流的方式
		1、java.util.stream.Stream<T>是Java 8新加入的最常用的流接口。（这并不是一个函数式接口。）
		2、获取一个流非常简单，有以下几种常用的方式：
			1、所有的Collection集合都可以通过stream默认方法获取流；
				default Stream<E> stream​()
			2、Stream接口的静态方法of可以获取数组对应的流。
				static <T> Stream<T> of​(T... values)
				参数是一个可变参数(底层是一个数组),那么我们就可以传递一个数组
				
				
				
				
		3、Collection接口或其子类才可以使用Stream()方法转换成流
			1、把集合转换为Stream流
				1、list接口
					List<String> list = new ArrayList<>();
					Stream<String> stream1 = list.stream();
				2、set接口
					Set<String> set = new HashSet<>();
					Stream<String> stream2 = set.stream();
				3、map接口->获取其键(得到一个set集合)
					Map<String,String> map = new HashMap<>();
					//获取键,存储到一个Set集合中
					Set<String> keySet = map.keySet();
					Stream<String> stream3 = keySet.stream();

				4、map->获取其值(得到一个Collection集合)
					//获取值,存储到一个Collection集合中
					Collection<String> values = map.values();
					Stream<String> stream4 = values.stream();
				5、map->获取其键值对对象(得到的是一个存储键值对对象的Set集合)
					//获取键值对(键与值的映射关系 entrySet)
					Set<Map.Entry<String, String>> entries = map.entrySet();
					Stream<Map.Entry<String, String>> stream5 = entries.stream();
			2、把数组转换为Stream流
				1、Stream<Integer> stream6 = Stream.of(1, 2, 3, 4, 5);
				2、Integer[] arr = {1,2,3,4,5};
					Stream<Integer> stream7 = Stream.of(arr);
				3 、String[] arr2 = {"a","bb","ccc"};
					Stream<String> stream8 = Stream.of(arr2);
			
			
			
			3、Stream的七种常用方法：
				1、延迟方法:返回值类型仍然是 Stream 接口自身类型的方法，因此支持链式调用。（除了终结方法外，其余方法均为延迟方法。）
					例如：filter\map\skip\limit\concat
						
						1、Stream<T> filter(Predicate<? super T> predicate);
						2、<R> Stream<R> map(Function<? super T, ? extends R> mapper);
						3、Stream<T> limit(long maxSize);
						4、Stream<T> skip(long n);
						5、static <T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b)
				2、终结方法:返回值类型不再是 Stream 接口自身类型的方法，因此不再支持类似 StringBuilder 那样的链式调用。
					例如：count\forEach
					1、long count();
					2、void forEach(Consumer<? super T> action);
	2、Stream流中的常用方法_forEach
		1、Stream流中的常用方法_forEach
			1、void forEach(Consumer<? super T> action);
			2、该方法接收一个Consumer接口，会将每一个流元素交给该接口的accept()函数进行处理。
				Consumer接口是一个消费型的函数式接口,可以传递Lambda表达式,消费数据

		2、简单记:
			forEach方法,用来遍历流中的数据
			是一个终结方法,遍历之后就不能继续调用Stream流中的其他方法
		3、代码案例：
			 public static void main(String[] args) {
				//获取一个Stream流
				Stream<String> stream = Stream.of("张三", "李四", "王五", "赵六", "田七");
				//使用Stream流中的方法forEach对Stream流中的数据进行遍历
				//简单的调用
				/*stream.forEach((String name)->{
					System.out.println(name);
				});*/
				//优化后的调用
				stream.forEach(name->System.out.println(name));
			}
	3、Stream流中的常用方法_filter
		1、Stream流中的常用方法_filter:用于对Stream流中的数据进行过滤
			1、Stream<T> filter(Predicate<? super T> predicate);
				filter方法的参数Predicate是一个函数式接口,会将每一个流元素交给该接口的test()函数进行过滤(Lambda表达式)
			2、Predicate中的抽象方法:返回值为true的保留在新的流中
				boolean test(T t);
				
				
		2、代码案例：
			//创建一个Stream流
			Stream<String> stream = Stream.of("张三丰", "张翠山", "赵敏", "周芷若", "张无忌");
			//对Stream流中的元素进行过滤,只要姓张的人
			Stream<String> stream2 = stream.filter((String name)->{return name.startsWith("张");});
			//遍历stream2流
			stream2.forEach(name-> System.out.println(name));
			//遍历stream流
			stream.forEach(name-> System.out.println(name));
		}
		
		3、注意事项：
			1、Stream流属于管道流,只能被消费(使用)一次,第一个Stream流调用完毕方法,数据就会流转到下一个Stream上
				而这时第一个Stream流已经使用完毕,就会关闭了，所以第一个Stream流就不能再调用方法了
				否则就会抛出异常：IllegalStateException: stream has already been operated upon or closed
	4、Stream流的特点_只能使用一次
		1、Stream流属于管道流,只能被消费(使用)一次,第一个Stream流调用完毕方法,数据就会流转到下一个Stream上
				而这时第一个Stream流已经使用完毕,就会关闭了，所以第一个Stream流就不能再调用方法了
				否则就会抛出异常：IllegalStateException: stream has already been operated upon or closed
	5、Stream流中的常用方法_map
		1、Stream流中的常用方法_map:用于类型转换
			1、如果需要将流中的元素映射到另一个流中，可以使用map方法.
			2、<R> Stream<R> map(Function<? super T, ? extends R> mapper);
				该接口需要一个Function函数式接口参数，会将每一个流元素交给该接口的apply()函数进行映射(转换),可以将当前流中的T类型数据转换为另一种R类型的流。
			3、Function中的抽象方法:返回一个新的类型的数据
				R apply(T t);
				
		2、代码案例：
			public static void main(String[] args) {
				//获取一个String类型的Stream流
				Stream<String> stream = Stream.of("1", "2", "3", "4");
				//使用map方法,把字符串类型的整数,转换(映射)为Integer类型的整数
				Stream<Integer> stream2 = stream.map((String s)->{
					return Integer.parseInt(s);
				});
				//遍历Stream2流
				stream2.forEach(i-> System.out.println(i));
			}
	6、Stream流中的常用方法_count
		1、Stream流中的常用方法_count:用于统计Stream流中元素的个数
		2、long count();
			count方法是一个终结方法,返回值是一个long类型的整数,所以不能再继续调用Stream流中的其他方法了
		3、代码案例：
			public static void main(String[] args) {
				//获取一个Stream流
				ArrayList<Integer> list = new ArrayList<>();
				list.add(1);
				list.add(2);
				list.add(3);
				list.add(4);
				list.add(5);
				list.add(6);
				list.add(7);
				Stream<Integer> stream = list.stream();
				long count = stream.count();
				System.out.println(count);//7
			}
	7、Stream流中的常用方法_limit
		1、Stream流中的常用方法_limit:用于截取流中的元素,limit方法可以对流进行截取，只取用前n个。
		2、Stream<T> limit(long maxSize);
			参数是一个long型，如果集合当前长度大于参数则进行截取；否则不进行操作
			limit方法是一个延迟方法,只是对流中的元素进行截取,返回的是一个新的流,所以可以继续调用Stream流中的其他方法
		3、代码案例：
			public static void main(String[] args) {
				//获取一个Stream流
				String[] arr = {"美羊羊","喜洋洋","懒洋洋","灰太狼","红太狼"};
				Stream<String> stream = Stream.of(arr);
				//使用limit对Stream流中的元素进行截取,只要前3个元素
				Stream<String> stream2 = stream.limit(3);
				//遍历stream2流
				stream2.forEach(name-> System.out.println(name));
			}
	8、Stream流中的常用方法_skip
		1、Stream流中的常用方法_skip:用于跳过元素,如果希望跳过前几个元素，可以使用skip方法获取一个截取之后的新流：
		2、Stream<T> skip(long n);
			如果流的当前长度大于n，则跳过前n个；否则将会得到一个长度为0的空流。
		3、代码案例：
			public static void main(String[] args) {
				//获取一个Stream流
				String[] arr = {"美羊羊","喜洋洋","懒洋洋","灰太狼","红太狼"};
				Stream<String> stream = Stream.of(arr);
				//使用skip方法跳过前3个元素
				Stream<String> stream2 = stream.skip(3);
				//遍历stream2流
				stream2.forEach(name-> System.out.println(name));
			}
	9、Stream流中的常用方法_concat
		1、Stream流中的常用方法_concat:用于把流组合到一起
			如果有两个流，希望合并成为一个流，那么可以使用Stream接口的静态方法concat
		2、static <T> Stream<T> concat(Stream<? extends T> a, Stream<? extends T> b)
			注意事项：因为是静态方法可以使用Stream接口调用(与of()方法的调用方式一样)
		3、代码案例：
			public static void main(String[] args) {
				//创建一个Stream流
				Stream<String> stream1 = Stream.of("张三丰", "张翠山", "赵敏", "周芷若", "张无忌");
				//获取一个Stream流
				String[] arr = {"美羊羊","喜洋洋","懒洋洋","灰太狼","红太狼"};
				Stream<String> stream2 = Stream.of(arr);
				//把以上两个流组合为一个流
				Stream<String> concat = Stream.concat(stream1, stream2);
				//遍历concat流
				concat.forEach(name-> System.out.println(name));
			}
	10、练习：集合元素处理（传统方式）
        1、现在有两个ArrayList集合存储队伍当中的多个成员姓名，要求使用传统的for循环（或增强for循环）依次进行以下若干操作步骤：
			1. 第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。
			2. 第一个队伍筛选之后只要前3个人；存储到一个新集合中。
			3. 第二个队伍只要姓张的成员姓名；存储到一个新集合中。
			4. 第二个队伍筛选之后不要前2个人；存储到一个新集合中。
			5. 将两个队伍合并为一个队伍；存储到一个新集合中。
			6. 根据姓名创建Person对象；存储到一个新集合中。
			7. 打印整个队伍的Person对象信息。
		2、代码案例：
			1、Person类：
				public class Person {
					private String name;
					public Person() {
					}
					public Person(String name) {
						this.name = name;
					}
					@Override
					public String toString() {
						return "Person{" +
								"name='" + name + '\'' +
								'}';
					}
					public String getName() {
						return name;
					}
					public void setName(String name) {
						this.name = name;
					}
				}
			2、测试类：
				public static void main(String[] args) {
					//第一支队伍
					ArrayList<String> one = new ArrayList<>();
					one.add("迪丽热巴");
					one.add("宋远桥");
					one.add("苏星河");
					one.add("石破天");
					one.add("石中玉");
					one.add("老子");
					one.add("庄子");
					one.add("洪七公");
					//1. 第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。
					ArrayList<String> one1 = new ArrayList<>();
					for (String name : one) {
						if(name.length()==3){
							one1.add(name);
						}
					}
					//2. 第一个队伍筛选之后只要前3个人；存储到一个新集合中。
					ArrayList<String> one2 = new ArrayList<>();
					for (int i = 0; i <3 ; i++) {
						one2.add(one1.get(i));//i = 0,1,2
					}

					//第二支队伍
					ArrayList<String> two = new ArrayList<>();
					two.add("古力娜扎");
					two.add("张无忌");
					two.add("赵丽颖");
					two.add("张三丰");
					two.add("尼古拉斯赵四");
					two.add("张天爱");
					two.add("张二狗");
					//3. 第二个队伍只要姓张的成员姓名；存储到一个新集合中。
					ArrayList<String> two1 = new ArrayList<>();
					for (String name : two) {
						if(name.startsWith("张")){
							two1.add(name);
						}
					}
					//4. 第二个队伍筛选之后不要前2个人；存储到一个新集合中。
					ArrayList<String> two2 = new ArrayList<>();
					for (int i = 2; i <two1.size() ; i++) {
						two2.add(two1.get(i)); //i 不包含0 1
					}

					//5. 将两个队伍合并为一个队伍；存储到一个新集合中。
					ArrayList<String> all = new ArrayList<>();
					all.addAll(one2);
					all.addAll(two2);

					//6. 根据姓名创建Person对象；存储到一个新集合中。
					ArrayList<Person> list = new ArrayList<>();
					for (String name : all) {
						list.add(new Person(name));
					}

					//7. 打印整个队伍的Person对象信息。
					for (Person person : list) {
						System.out.println(person);
					}
				}
	11、练习：集合元素处理（Stream方式）
		1、将上一题当中的传统for循环写法更换为Stream流式处理方式。
			两个集合的初始内容不变，Person类的定义也不变。
		2、代码案例：
			1、测试类：
				public static void main(String[] args) {
					//第一支队伍
					ArrayList<String> one = new ArrayList<>();
					one.add("迪丽热巴");
					one.add("宋远桥");
					one.add("苏星河");
					one.add("石破天");
					one.add("石中玉");
					one.add("老子");
					one.add("庄子");
					one.add("洪七公");
					//1. 第一个队伍只要名字为3个字的成员姓名；存储到一个新集合中。
					//2. 第一个队伍筛选之后只要前3个人；存储到一个新集合中。
					Stream<String> oneStream = one.stream().filter(name -> name.length() == 3).limit(3);

					//第二支队伍
					ArrayList<String> two = new ArrayList<>();
					two.add("古力娜扎");
					two.add("张无忌");
					two.add("赵丽颖");
					two.add("张三丰");
					two.add("尼古拉斯赵四");
					two.add("张天爱");
					two.add("张二狗");
					//3. 第二个队伍只要姓张的成员姓名；存储到一个新集合中。
					//4. 第二个队伍筛选之后不要前2个人；存储到一个新集合中。
					Stream<String> twoStream = two.stream().filter(name -> name.startsWith("张")).skip(2);

					//5. 将两个队伍合并为一个队伍；存储到一个新集合中。
					//6. 根据姓名创建Person对象；存储到一个新集合中。
					//7. 打印整个队伍的Person对象信息。
					Stream.concat(oneStream,twoStream).map(name->new Person(name)).forEach(p-> System.out.println(p));
				}
	
第4节 方法引用(是用来优化Lambda表达式的)
	1、方法引用基本介绍
		1、在使用Lambda表达式的时候，我们实际上传递进去的代码就是一种解决方案：拿什么参数做什么操作。那么考虑
			一种情况：如果我们在Lambda中所指定的操作方案，已经有地方存在相同方案，那是否还有必要再写重复逻辑？
		2、问题分析:
			Lambda表达式的目的,打印参数传递的字符串,把参数s,传递给了System.out对象,调用out对象中的方法println对字符串进行了输出
			注意:
				1.System.out对象是已经存在的
				2.println方法也是已经存在的
			所以我们可以使用方法引用来优化Lambda表达式,可以使用System.out方法直接引用(调用)println方法
			
		3、用方法引用改进代码：
			public class Demo02PrintRef {
				private static void printString(Printable data) {
					data.print("Hello, World!");
				}
				public static void main(String[] args) {
					printString(System.out::println);
				}
			}
			
			分析：双冒号 :: 为引用运算符，而它所在的表达式被称为方法引用。如果Lambda要表达的函数方案已经存在于某个方
			法的实现中，那么则可以通过双冒号来引用该方法作为Lambda的替代者。
		4、下面两种写法，完全等效：
			1、Lambda表达式写法： s -> System.out.println(s);
			2、方法引用写法： System.out::println
			
			
			3、第一种语义是指：拿到参数之后经Lambda之手，继而传递给 System.out.println 方法去处理。
			4、第二种等效写法的语义是指：直接让 System.out 中的 println 方法来取代Lambda。两种写法的执行效果完全一样，
				而第二种方法引用的写法复用了已有方案，更加简洁。
			注:Lambda 中 传递的参数 一定是方法引用中 的那个方法可以接收的类型,否则会抛出异常

	2、方法引用_通过对象名引用成员方法
		1、通过对象名引用成员方法的使用前提：
			1、对象名是已经存在的(不存在,要先创建)
			2、成员方法也是已经存在,就可以使用对象名来引用成员方法
		2、代码案例：
			1、测试类：
				public class Demo01ObjectMethodReference {
					//定义一个方法,方法的参数传递Printable接口
					public static void printString(Printable p){
						p.print("Hello");
					}
					public static void main(String[] args) {
						//1、调用printString方法,方法的参数Printable是一个函数式接口,所以可以传递Lambda表达式
						printString((s)->{
							//创建MethodRerObject对象
							MethodRerObject obj = new MethodRerObject();
							//调用MethodRerObject对象中的成员方法printUpperCaseString,把字符串按照大写输出
							obj.printUpperCaseString(s);
						});

						//2、使用方法引用优化Lambda表达式
						//创建MethodRerObject对象
						MethodRerObject obj = new MethodRerObject();
						printString(obj::printUpperCaseString);
					}
				}
			2、成员方法的类
				public class MethodRerObject {
					//定义一个成员方法,传递字符串,把字符串按照大写输出
					public void printUpperCaseString(String str){
						System.out.println(str.toUpperCase());
					}
				}
	3、方法引用_通过类名引用静态成员方法
		1、通过类名引用静态成员方法的使用前提：
			1、类已经存在
			2、静态成员方法也已经存在(成员方法为完成特定业务的方法),就可以通过类名直接引用静态成员方法
		2、代码案例：
			1、测试类：
				public class Demo01StaticMethodReference {
					//定义一个方法,方法的参数传递要计算绝对值的整数,和函数式接口Calcable
					public static int method(int number,Calcable c){
					   return c.calsAbs(number);
					}
					public static void main(String[] args) {
						//1、调用method方法,传递计算绝对值得整数,和Lambda表达式
						int number = method(-10,(n)->{
							//对参数进行绝对值得计算并返回结果
							return Math.abs(n);
						});
						System.out.println(number);
						/*
							2、使用方法引用优化Lambda表达式,Math类是存在的,abs计算绝对值的静态方法也是已经存在的
							所以我们可以直接通过类名引用静态方法
						 */
						int number2 = method(-10,Math::abs);
						System.out.println(number2);
					}
				}
				
			2、函数式接口：
				@FunctionalInterface
				public interface Calcable {
					//定义一个抽象方法,传递一个整数,对整数进行绝对值计算并返回
					int calsAbs(int number);
				}
	4、方法引用_通过super引用父类的成员方法
		1、如果存在继承关系，当Lambda中需要出现super调用时(即在子类中要调用父类方法时)，也可以使用方法引用进行替代。
		2、通过super引用父类的成员方法的使用前提：
			1、存在子父类继承关系
			2、super是已经存在的(即存在继承关系,并且在子类调用)
			3、父类的成员方法sayHello也是已经存在的
        3、代码案例：
			1、函数式接口:
				@FunctionalInterface
				public interface Greetable {
					//定义一个见面的方法
					void greet();
				}
			2、测试类父类:
				public class Human {
					//定义一个sayHello的方法
					public void sayHello(){
						System.out.println("Hello 我是Human!");
					}
				}
			3、测试类子类:
				public class Man extends Human{
					//子类重写父类sayHello的方法
					@Override
					public void sayHello() {
						System.out.println("Hello 我是Man!");
					}
					//定义一个方法参数传递Greetable接口
					public void method(Greetable g){
						g.greet();
					}
					public void show(){
						/*1、调用method方法,方法的参数Greetable是一个函数式接口,所以可以传递Lambda
						因为有子父类关系,所以存在的一个关键字super,代表父类,所以我们可以直接使用super调用父类的成员方法*/
						method(()->{
							super.sayHello();
						});

						/*
						   2、使用super引用类的成员方法(super是已经存在的,父类的成员方法sayHello也是已经存在的)
							所以我们可以直接使用super引用父类的成员方法
						*/
					  method(super::sayHello);
					}
					public static void main(String[] args) {
						new Man().show();
					}
				}

	5、方法引用_通过this引用本类的成员方法
		1、this代表当前对象，如果需要引用的方法就是当前类中的成员方法，那么可以使用“this::成员方法”的格式来使用方法引用。
		2、使用前提：
			1、this是已经存在的(在本类中调用函数式接口为参数的方法)
            2、本类的成员方法buyHouse也是已经存在的
		3、案例代码：
			1、函数式接口：
				@FunctionalInterface
				public interface Richable {
					//定义一个想买什么就买什么的方法
					void buy();
				}
			2、测试类：
				public class Husband {
					//定义一个买房子的方法
					public void buyHouse(){
						System.out.println("北京二环内买一套四合院!");
					}
					//定义一个结婚的方法,参数传递Richable接口
					public void marry(Richable r){
						r.buy();
					}
					//定义一个非常高兴的方法
					public void soHappy(){
						//1、调用结婚的方法,方法的参数Richable是一个函数式接口,传递Lambda表达式
					   /* marry(()->{
							//使用this.成员方法,调用本类买房子的方法
							this.buyHouse();
						});*/

						//2、使用方法引用优化Lambda表达式
						marry(this::buyHouse);
					}

					public static void main(String[] args) {
						new Husband().soHappy();
					}
				}

	6、方法引用_类的构造器(构造方法)引用(使用构造器方法引用来创建一个对应类的对象)
		1、由于构造器的名称与类名完全一样，并不固定。所以构造器引用使用 类名称::new 的格式表示。
			格式：
				Person::new
		2、使用构造方法引用优化Lambda表达式的使用前提：
            1、构造方法new Person(String name) 已知
            2、创建对象已知 new,就可以使用Person引用new创建对象
		3、代码案例：
			1、函数式接口：
				//定义一个创建Person对象的函数式接口
				@FunctionalInterface
				public interface PersonBuilder {
					//定义一个方法,根据传递的姓名,创建Person对象返回
					Person builderPerson(String name);
				}
			2、包含构造方法的被创建对象的类
				public class Person {
					private String name;
					public Person() {
					}
					public Person(String name) {
						this.name = name;
					}
					public String getName() {
						return name;
					}
					public void setName(String name) {
						this.name = name;
					}
				}
			3、测试类：
				public class Demo {
					//定义一个方法,参数传递姓名和PersonBuilder接口,方法中通过姓名创建Person对象
					public static void printName(String name,PersonBuilder pb){
						Person person = pb.builderPerson(name);
						System.out.println(person.getName());
					}

					public static void main(String[] args) {
						//1、调用printName方法,方法的参数PersonBuilder接口是一个函数式接口,可以传递Lambda
						printName("迪丽热巴",(String name)->{
							return new Person(name);
						});

						//2、使用方法引用优化Lambda表达式
						printName("古力娜扎",Person::new);//使用Person类的带参构造方法,通过传递的姓名创建对象
					}
				}


	7、方法引用_数组的构造器引用(使用数组构造器方法引用来创建一个数组)
		1、数组也是 Object 的子类对象，所以同样具有构造器，只是语法稍有不同。
			格式：
				int[]::new
		2、使用数组构造器的方法引用优化Lambda表达式的使用前提：
            1、已知创建的就是int[]数组
            2、数组的长度也是已知的,就可以使用方法引用
            3、int[]引用new,根据参数传递的长度来创建数组
			
		3、代码案例：
			1、根据数组长度创建数组的函数式接口:
				//定义一个创建数组的函数式接口
				@FunctionalInterface
				public interface ArrayBuilder {
					//定义一个创建int类型数组的方法,参数传递数组的长度,返回创建好的int类型数组
					int[] builderArray(int length);
				}
			2、测试类:
				public class Demo {
					/*
						定义一个方法:
						1、方法的参数传递创建数组的长度和ArrayBuilder接口
						2、方法内部根据传递的长度使用ArrayBuilder中的方法创建数组并返回
					 */
					public static int[] createArray(int length, ArrayBuilder ab){
						return  ab.builderArray(length);
					}
					public static void main(String[] args) {
						//1、调用createArray方法,传递数组的长度和Lambda表达式
						int[] arr1 = createArray(10,(len)->{
							//根据数组的长度,创建数组并返回
							return new int[len];
						});
						System.out.println(arr1.length);//10

						//使用数组的构造器引用优化Lambda表达式
						int[] arr2 =createArray(10,int[]::new);
						System.out.println(Arrays.toString(arr2));
						System.out.println(arr2.length);//10
					}
				}
