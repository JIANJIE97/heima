第1节 junit单元测试
	1、今日内容
		1. Junit单元测试
		2. 反射
		3. 注解
	2、Junit_测试概述
		1、测试分类：
			1. 黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。
			2. 白盒测试：需要写代码的。关注程序具体的执行流程。(Junit测试也属于白盒测试)
	3、Junit_使用步骤
		Junit使用：白盒测试
			1、步骤：
				1. 定义一个测试类(测试用例)
					* 建议：
						1、测试类名：被测试的类名Test		CalculatorTest
						2、包名：xxx.xxx.xx.test		cn.itcast.test

				2. 定义测试方法：可以独立运行
					* 建议：
						1、方法名：test测试的方法名		testAdd()  
						2、返回值：void
						3、参数列表：空参

				3. 给方法加@Test
				4. 导入junit依赖环境:java.org.junit.Test

			2、判定结果：
				1、红色：失败
				2、绿色：成功
				3、一般我们会使用断言操作来处理结果
					import org.junit.Assert
					Assert.assertEquals(期望的结果,运算的结果);

			3、补充：
				1、@Before:
					* 修饰的方法会在测试方法之前被自动执行
				2、@After:
					* 修饰的方法会在测试方法执行之后自动被执行
	4、Junit_@Before&@After
		1、@Before:修饰的方法会在测试方法之前被自动执行
		2、@After:修饰的方法会在测试方法执行之后自动被执行
		
		注意：如果测试方法中报错出现异常,@Before和@After修饰的方法也都会被执行
第2节 反射
	1、反射_概述
		1、反射：框架设计的灵魂
		2、框架：半成品软件。可以在框架的基础上进行软件开发，简化编码
		3、反射：将类的各个组成部分封装为其他对象，这就是反射机制
			* 好处：
				1. 可以在程序运行过程中，操作这些对象。
				2. 可以解耦，提高程序的可扩展性。
				
				
				
		4、Java代码在计算机中经历的三个阶段：
			1、Source源代码阶段(保存在硬盘中)
				1、编写java代码保存在.java文件中
				2、经过javac编译形成字节码文件.class
			2、Class类对象阶段(保存在内存中)
				1、经过类加载器(ClassLoader)把字节码文件加载进内存
				2、在内存中是使用"Class类"对象来表示字节码文件(Class类是所有字节码文件创建对象的模板)
					即内存中表示对应字节码文件的对象是基于Class类创建的,Class是描述所有字节码文件共同的特征和行为
				3、Class类对象里面有比较重要的三个东西(或者说所有的字节码文件都有的特征和行为)：
					1、成员变量
					2、构造方法
					3、成员方法
				4、因为这三个特征,每一个特征又不止一种操作，例如成员变量存在获取变量和设置变量的操作,所以对这三个特征封装成为三个对象
					1、成员变量:Field
					2、构造方法:Constructor
					3、成员方法:Method
				4、因为一个字节码文件不止一个成员变量\构造方法\成员方法,所以都使用对象数组表示
					1、成员变量:Field[]	fields
					2、构造方法:Constructor[] cons
					3、成员方法:Method[] methods
			3、Runtime运行时阶段(内存中)
				创建对象:new Person();
	2、反射_获取字节码Class对象的三种方式
		1、获取Class对象的方式：
			1. Class.forName("全类名")：将字节码文件加载进内存，返回Class对象
				1、多用于配置文件，将类名定义在配置文件中。读取文件，加载类
			2. 类名.class：通过类名的属性class获取
				2、多用于参数的传递
			3. 对象.getClass()：getClass()方法在Object类中定义着。
				3、多用于对象的获取字节码的方式

		2、结论：
			同一个字节码文件(*.class)在一次程序运行过程中，只会被加载一次，不论通过哪一种方式获取的Class对象都是同一个。
		3、案例代码：
			public static void main(String[] args) throws Exception {

				//1.Class.forName("全类名")
				Class cls1 = Class.forName("cn.itcast.domain.Person");
				System.out.println(cls1);
				//2.类名.class
				Class cls2 = Person.class;
				System.out.println(cls2);
				//3.对象.getClass()
				Person p = new Person();
				Class cls3 = p.getClass();
				System.out.println(cls3);

				//== 比较三个对象
				System.out.println(cls1 == cls2);//true
				System.out.println(cls1 == cls3);//true

			}
	
	3、反射_Class对象功能概述(Reflect)
		* 获取功能：
			1. 获取成员变量们
				* Field[] getFields() ：获取所有public修饰的成员变量
				* Field getField(String name)   获取指定名称的 public修饰的成员变量

				* Field[] getDeclaredFields()  获取所有的成员变量，不考虑修饰符
				* Field getDeclaredField(String name)  获取指定名称的所有的成员变量，不考虑修饰符
			2. 获取构造方法们
				* Constructor<?>[] getConstructors()  
				* Constructor<T> getConstructor(类<?>... parameterTypes)  

				* Constructor<T> getDeclaredConstructor(类<?>... parameterTypes)  
				* Constructor<?>[] getDeclaredConstructors()  
			3. 获取成员方法们：
				* Method[] getMethods()  
				* Method getMethod(String name, 类<?>... parameterTypes)  

				* Method[] getDeclaredMethods()  
				* Method getDeclaredMethod(String name, 类<?>... parameterTypes)  

			4. 获取全类名	
				* String getName() 
	4、反射_Class对象功能_获取Field
		1、获取Field(成员变量)对象：
			0、获取Person的Class对象
				Class personClass = Person.class;
			1、获取指定名称的所有的成员变量，不考虑修饰符(有4种方法获取成员变量对象,这是其中一种)
				Field d = personClass.getDeclaredField("成员变量名");
		2、根据成员变量对象获取和设置成员变量的值：
			1、获取成员变量的值
				1、创建成员变量对应类的对象
				Person p = new Person();
				2、使用成员变量对象来调用get(object obj)的方法
				Object value = d.get(p);
				System.out.println(value);
			2、设置成员变量的值
				1、创建成员变量对应类的对象
				Person p = new Person();
				2、使用成员变量对象来调用set(object obj,Object value)的方法
				d.set(p,"张三");
				System.out.println(p);
		3、成员变量对象的操作：
			1. 设置值
				void set(Object obj, Object value)  
			2. 获取值
				Object get​(Object obj) 返回由该 Field表示的字段在指定对象上的值。  
			3. 忽略访问权限修饰符的安全检查//暴力反射
				void setAccessible​(true) 将此反射对象的 accessible标志设置为指示的布尔值。 
				
				
		4、注意事项：
			1、如果获取到的成员变量对象是私有的话,需要忽略访问权限修饰符的安全检查,才可以操作成员变量对象(暴力反射)
				d.setAccessible​(true);
	5、反射_Class对象功能_获取Constructor(注意也可以使用暴力反射)
		1、获取构造器对象Constructor：
			0、获取Person的Class对象
				Class personClass = Person.class;
			1、使用Constructor<T> getConstructor(类<?>... parameterTypes)方法获取构造器对象：
				Constructor constructor = personClass.getConstructor(String.class,int.class);
		2、使用构造器对象Constructor创建对象：
			1、构造器对象创建对象的方法:T newInstance(Object... initargs)  
				Object person = constructor.newInstance("张三", 23);
				
				
			2、无参的构造器对象也可以创建对象：
				Class personClass = Person.class;
				Constructor constructor = personClass.getConstructor();
				Object person = constructor.newInstance();
				
				
			3、注意事项：
				如果使用空参数构造方法创建对象，操作可以简化：Class对象的newInstance方法
				Class personClass = Person.class;
				Object o = personClass.newInstance();
				System.out.println(o);
	6、反射_Class对象功能_获取Method
		1、获取成员方法对象：有四种方法
			1、Method[] getMethods()
				获取所有public修饰的成员方法对象,返回成员方法对象数组
            2、Method getMethod(String name, 类<?>... parameterTypes)
				获取指定名称的 public修饰的成员方法对象

            3、Method[] getDeclaredMethods()
				获取所有的成员方法，不考虑修饰符,返回成员方法对象数组
            4、Method getDeclaredMethod(String name, 类<?>... parameterTypes)
				获取指定名称的所有的成员方法对象，不考虑修饰符
		2、Method成员方法对象的常用方法：
			1、执行方法：Object invoke(Object obj, Object... args)  
			2、获取方法名称：String getName:获取方法名
			
		3、代码案例：
			public static void main(String[] args) throws Exception {
				//0、获取Person的Class对象
				Class personClass = Person.class;
				
				//1、获取指定名称的方法对象
				Method eat_method = personClass.getMethod("eat");
				
				//2、成员方法对象的调用
				Person p = new Person();
				//2.1、执行无参的成员方法
				eat_method.invoke(p);
				Method eat_method2 = personClass.getMethod("eat", String.class);
				//2.2、执行有参的成员方法
				eat_method2.invoke(p,"饭");
				System.out.println("-----------------");

				//获取所有public修饰的方法
				Method[] methods = personClass.getMethods();
				for (Method method : methods) {
					System.out.println(method);
					//获取方法名称
					String name = method.getName();
					System.out.println(name);
					//method.setAccessible(true);
				}

				//获取类名
				String className = personClass.getName();
				System.out.println(className);//cn.itcast.domain.Person

			}
			
			
	7、获取类名
        String className = personClass.getName();
        System.out.println(className);//cn.itcast.domain.Person

	7、反射_案例
		1、需求：写一个"框架"，不能改变该类的任何代码的前提下，可以帮我们创建任意类的对象，并且执行其中任意方法(根据配置文件创建对象,并调用对应的方法)
			1、实现：
				1. 配置文件
				2. 反射
			2、步骤：
				1. 将需要创建的对象的全类名和需要执行的方法定义在配置文件中
				2. 在程序中加载读取配置文件
				3. 使用反射技术来加载类文件进内存
				4. 创建对象
				5. 执行方法
第3节 注解
	1、注解_概念
		1、注释与注解的区别：
			1、注解概念：说明程序的。给计算机看的
			2、注释概念：用文字描述程序的。给程序员看的
		2、注解的定义：
			1、定义：注解（Annotation），也叫元数据。一种代码级别的说明。它是JDK1.5及以后版本引入的一个特性，与类、接口、枚举是在同一个层次。
				它可以声明在包、类、字段、方法、局部变量、方法参数等的前面，用来对这些元素进行说明，注释。
			2、概念描述：
				1、JDK1.5之后的新特性
				2、说明程序的
				3、使用注解：@注解名称
		3、作用分类：
			①编写文档：通过代码里标识的注解生成文档【生成文档doc文档】
		***	②代码分析：通过代码里标识的注解对代码进行分析【使用反射】
			③编译检查：通过代码里标识的注解让编译器能够实现基本的编译检查【Override】
			
		4、学习注解的目标：
			1、JDK中预定义的一些注解
			2、自定义注解
			3、在程序中使用(解析)注解
	2、注解_JDK内置注解
		1、@Override	：检测被该注解标注的方法是否是继承自父类(接口)的
		2、@Deprecated：该注解标注的内容，表示已过时
		3、@SuppressWarnings：压制警告
			一般传递参数all  @SuppressWarnings("all")
	3、注解_自定义注解_格式&本质
		1、格式：
			1、元注解
			2、public @interface 注解名称{
					属性列表;
				}

		2、本质：注解本质上就是一个接口，该接口默认继承Annotation接口
			public interface MyAnno extends java.lang.annotation.Annotation {}

		3、属性：接口中的抽象方法
	4、注解_自定义注解_属性定义
		1、属性定义要求：
			1. 属性的返回值类型有下列取值
				1、基本数据类型
				2、String
				3、枚举
				4、注解
				5、以上类型的数组

			2. 定义了属性，在使用时需要给属性赋值
				1. 如果定义属性时，使用default关键字给属性默认初始化值，则使用注解时，可以不进行属性的赋值。
				2. 如果只有一个属性需要赋值，并且属性的名称是value，则value可以省略，直接定义值即可。
				3. 数组赋值时，值使用{}包裹。如果数组中只有一个值，则{}可以省略
		2、代码案例：
			@MyAnno(value=12,per = Person.P3,anno2 = @MyAnno2,strs={"bbb","aaa"})
			public class Worker {}

	5、注解_自定义注解_元注解
		1、元注解：用于描述注解的注解
			1、@Target：描述注解能够作用的位置(@Target({ElementType.TYPE,ElementType.METHOD,ElementType.FIELD}))
				1、ElementType取值：
					1、TYPE：可以作用于类上
					2、METHOD：可以作用于方法上
					3、FIELD：可以作用于成员变量上
			2、@Retention：描述注解被保留的阶段
				1、@Retention(RetentionPolicy.SOURCE)：当前被描述的注解，不会保留到class字节码文件中
				2、@Retention(RetentionPolicy.CLASS)：当前被描述的注解，会保留到class字节码文件中，但是不会被JVM读取到
				3、@Retention(RetentionPolicy.RUNTIME)：当前被描述的注解，会保留到class字节码文件中，并被JVM读取到
			3、@Documented：描述注解是否被抽取到api文档中
			4、@Inherited：描述注解是否被子类继承
	6、注解_解析注解
		1、在程序使用(解析)注解：获取注解中定义的属性值
			1. 获取注解定义的位置的对象（Class\Method\Field）
				判断注解定义在那个位置:
					1、在类上获取类对象：类名.class
					2、在成员方法上获取成员方法对象:类名.class.getMethod("方法名")
					3、在成员变量上获取成员变量对象:类名.class.getField("成员变量名")
			2. 获取指定的注解(注解定义的位置的对象调用getAnnotation(Class)方法)
				1、getAnnotation(Class)
					<A extends Annotation> A getAnnotation​(Class<A> annotationClass) 
					参数annotationClass其实是注解的字节码对象:注解名.class
				2、该方法的本质：其实就是在内存中生成了一个该注解接口的子类实现对象
					public class ProImpl implements Pro{
						public String className(){
							return "cn.itcast.annotation.Demo1";
						}
						public String methodName(){
							return "show";
						}
					}
			3. 调用注解中的抽象方法获取配置的属性值
				String className = 注解的子类实现对象.className();
				String methodName = 注解的子类实现对象.methodName();
	7、注解_案例_简单的测试框架
		
		1、小结：
			1. 以后大多数时候，我们会使用注解，而不是自定义注解
			2. 注解给谁用？
				1. 编译器
				2. 给解析程序用
			3. 注解不是程序的一部分，可以理解为注解就是一个标签
		2、案例代码：
			/**
			 * 简单的测试框架
			 * 当主方法执行后，会自动自行被检测的所有方法(加了Check注解的方法)，判断方法是否有异常，记录到文件中
			 */
			 
			 public static void main(String[] args) throws IOException {
				//1.创建计算器对象
				Calculator c = new Calculator();
				//2.获取字节码文件对象
				Class cls = c.getClass();
				//3.获取所有方法
				Method[] methods = cls.getMethods();
				int number = 0;//出现异常的次数
				BufferedWriter bw = new BufferedWriter(new FileWriter("bug.txt"));
				for (Method method : methods) {
					//4.判断方法上是否有Check注解
					if(method.isAnnotationPresent(Check.class)){
						//5.有，执行
						try {
							method.invoke(c);
						} catch (Exception e) {
							//6.捕获异常
							//记录到文件中
							number ++;
							bw.write(method.getName()+ " 方法出异常了");
							bw.newLine();
							bw.write("异常的名称:" + e.getCause().getClass().getSimpleName());
							bw.newLine();
							bw.write("异常的原因:"+e.getCause().getMessage());
							bw.newLine();
							bw.write("--------------------------");
							bw.newLine();
						}
					}
				}
				bw.write("本次测试一共出现 "+number+" 次异常");
				bw.flush();
				bw.close();
			}
			
		3、注意事项：
			1、判断方法上是否有对应(Check)的注解
				method.isAnnotationPresent(Check.class)//成员方法对象调用isAnnotationPresent()，参数为注解的字节码对象
			2、获取异常的名称(获取原因对象->获取字节码对象->获取简短的名称)：
				e.getCause().getClass().getSimpleName()
			3、获取异常的原因：
				e.getCause().getMessage()