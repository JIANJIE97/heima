1、MySQL基础语法学习目标
	1) 能够理解数据库的概念
	2) 能够安装 MySQL 数据库
	3) 能够启动,关闭及登录 MySQL
	4) 能够使用 SQL 语句操作数据库
	5) 能够使用 SQL 语句操作表结构
	6) 能够使用 SQL 语句进行数据的添加修改和删除的操作(DML)
	7) 能够使用 SQL 语句简单查询数据(DQL)





01 数据库概念
	1、JavaWeb课程介绍
		1. 什么JavaWeb？
			使用Java语言开发互联网项目。简单理解：使用Java语言开发网站
		2. 课程介绍：30天
			1. 数据库：5天
			2. 网页前端：5天
			3. web核心技术：15天
			4. 旅游管理系统：5天
	2、今日内容
		1、数据库的基本概念
		2、MySQL数据库软件
			1、安装
			2、卸载
			3、配置
		3、SQL
	3、数据库的基本概念
		1. 数据库的英文单词： DataBase 简称 ： DB
		2. 什么数据库？
			* 用于存储和管理数据的仓库。

		3. 数据库的特点：
			1. 持久化存储数据的。其实数据库就是一个文件系统
			2. 方便存储和管理数据
			3. 使用了统一的方式操作数据库 -- SQL

		
		4. 常见的数据库软件
			* 参见《MySQL基础.pdf》
			
	4、常见的数据库软件介绍
		1、MySQL：开源免费的数据库，小型的数据库，已经被 Oracle 收购了。MySQL6.x 版本也开始收费。后来 Sun
			公司收购了 MySQL，而 Sun 公司又被 Oracle 收购
		2、Oracle：收费的大型数据库，Oracle 公司的产品。
		3、DB2 ：IBM 公司的数据库产品,收费的。常应用在银行系统中。
		4、SQL Server：MicroSoft 公司收费的中型的数据库。C#、.net 等语言常使用。
		5、SQLite: 嵌入式的小型数据库，应用在手机端，如：Android。
02 MySQL安装与使用
	1、MySQL的安装
		* 参见《MySQL基础.pdf》
	2、MySQL的卸载
		1. 去mysql的安装目录找到my.ini文件
			* 复制 datadir="C:/ProgramData/MySQL/MySQL Server 5.5/Data/"
		2. 卸载MySQL
		3. 删除C:/ProgramData目录下的MySQL文件夹。
	3、MySQL服务启动和关闭
		1、MySQL服务启动
			1. 手动。
			2. cmd--> services.msc 打开服务的窗口
			3. 使用管理员打开cmd
				* net start mysql : 启动mysql的服务
				* net stop mysql:关闭mysql服务
	4、MySQL登录和退出
		1、MySQL登录
			1. mysql -uroot -p密码
			2. mysql -hip -uroot -p连接目标的密码
			3. mysql --host=ip --user=root --password=连接目标的密码
		2、MySQL退出
			1. exit
			2. quit
	5、MySQL目录结构
		1. MySQL安装目录：basedir="D:/develop/MySQL/"
			我的安装目录是：basedir="D:/mysql-5.5.40-win64/"
			* 配置文件 my.ini
		2. MySQL数据目录：datadir="C:/ProgramData/MySQL/MySQL Server 5.5/Data/"
			1、我的数据目录是:datadir="C:/ProgramData/MySQL/MySQL Server 5.5/Data/"
			2、几个概念
				1、数据库：文件夹
					默认情况下MySQL默认安装了三个数据库(mysql、performance_schema、test)
					故：C:\ProgramData\MySQL\MySQL Server 5.5\data文件夹下存在三个文件夹
						1、mysql
						2、performance_schema
						3、test
				2、表：文件
					在对应的文件夹(数据库)下存在文件(表.frm)
				3、数据：数据
03 SQL基本概念与通用语法
	1、SQL基本概念
		1.什么是SQL？
			Structured Query Language：结构化查询语言
			其实就是定义了操作所有关系型数据库的规则。每一种数据库操作的方式存在不一样的地方，称为“方言”。
			
	2.SQL通用语法
			1. SQL 语句可以单行或多行书写，以分号结尾。
			2. 可使用空格和缩进来增强语句的可读性。
			3. MySQL 数据库的 SQL 语句不区分大小写，关键字建议使用大写。
			4. 3 种注释
				1、单行注释: 
					1、-- 注释内容(注意两个横线后必须有空格) 
					2、#注释内容(mysql 特有) 
				2、多行注释: /* 注释 */
				
	3. SQL分类
			1) DDL(Data Definition Language)数据定义语言
				用来定义数据库对象：数据库，表，列等。关键字：create, drop,alter 等
			2) DML(Data Manipulation Language)数据操作语言
				用来对数据库中表的数据进行增删改。关键字：insert, delete, update 等
			3) DQL(Data Query Language)数据查询语言
				用来查询数据库中表的记录(数据)。关键字：select, where 等
			4) DCL(Data Control Language)数据控制语言(了解)
				用来定义数据库的访问权限和安全级别，及创建用户。关键字：GRANT， REVOKE 等
04 数据库的CRUD操作
	1、SQL分类(DDL(数据库和表)\DML(增删改数据)\DQL(查数据)\DCL(权限控制))
	2. 操作数据库：CRUD
		1. C(Create):创建
			1、创建数据库：
				create database 数据库名称;
			2、创建数据库，判断不存在，再创建：
				create database if not exists 数据库名称;
			3、创建数据库，并指定字符集
				create database 数据库名称 character set 字符集名;
			4、练习： 创建db4数据库，判断是否存在，并制定字符集为gbk
				create database if not exists db4 character set gbk;
		2. R(Retrieve)：查询
			1、查询所有数据库的名称:
				show databases;
			2、查询某个数据库的字符集:查询某个数据库的创建语句
				show create database 数据库名称;
		3. U(Update):修改
			1、修改数据库的字符集
				alter database 数据库名称 character set 字符集名称;
		4. D(Delete):删除
			1、删除数据库
				drop database 数据库名称;
			2、判断数据库存在，存在再删除
				drop database if exists 数据库名称;
		5. 使用数据库
			1、查询当前正在使用的数据库名称
				select database();
			2、使用数据库
				use 数据库名称;
05 数据库表的CRUD操作
	1. C(Create):创建
		1. 语法：
			create table 表名(
				列名1 数据类型1,
				列名2 数据类型2,
				....
				列名n 数据类型n
			);
			* 注意：最后一列，不需要加逗号（,）
		2、数据库数据类型：
			1. int：整数类型
				age int,
			2. double:小数类型
				score double(5,2)
			3. date:日期，只包含年月日，yyyy-MM-dd
			4. datetime:日期，包含年月日时分秒	 yyyy-MM-dd HH:mm:ss
			5. timestamp:时间错类型	包含年月日时分秒	 yyyy-MM-dd HH:mm:ss	
				如果将来不给这个字段赋值，或赋值为null，则默认使用当前的系统时间，来自动赋值
			6. varchar：字符串
				1、name varchar(20):姓名最大20个字符
				2、zhangsan 8个字符  张三 2个字符
		3、创建表案例：
			create table student(
				id int,
				name varchar(32),
				age int ,
				score double(4,1),
				birthday date,
				insert_time timestamp
			);
		4、复制表：
			create table 表名 like 被复制的表名;	  	
	2. R(Retrieve)：查询
		1、查询某个数据库中所有的表名称
			show tables;
		2、查询表结构
			desc 表名;
		3、查询表的字符集：
			show create table 表名
	3. U(Update):修改
		1. 修改表名
			alter table 表名 rename to 新的表名;
		2. 修改表的字符集
			alter table 表名 character set 字符集名称;
		3、修改列:
			1. 添加一列
				alter table 表名 add 列名 数据类型;
			2. 修改列名称 类型
				1、修改列名和数据类型:alter table 表名 change 列名 新列名 新数据类型;
				2、修改数据类型:alter table 表名 modify 列名 新数据类型;
			3. 删除列
				alter table 表名 drop 列名;
	4. D(Delete):删除
		1、drop table 表名;
		2、drop table  if exists 表名 ;
	5、图形化界面工具SQLyog
		
06 数据库表中记录的基本操作DML
	1. DML添加数据：
		1、语法：
			insert into 表名(列名1,列名2,...列名n) values(值1,值2,...值n);
		2、注意：
			1. 列名和值要一一对应。
			2. 如果表名后，不定义列名，则默认给所有列添加值
				insert into 表名 values(值1,值2,...值n);
			3. 除了数字类型，其他类型需要使用引号(单双都可以)引起来
	2. DML删除数据：
		1、语法：
			delete from 表名 [where 条件]
		2、注意：
			1. 如果不加条件，则删除表中所有记录。
			2. 如果要删除所有记录
				1. delete from 表名; -- 不推荐使用。有多少条记录就会执行多少次删除操作
				2. TRUNCATE TABLE 表名; -- 推荐使用，效率更高 先删除表，然后再创建一张一样的表。
	3. DML修改数据：
		1、语法：
			update 表名 set 列名1 = 值1, 列名2 = 值2,... [where 条件];

		2、注意：
			1. 如果不加任何条件，则会将表中所有记录全部修改。
07 数据库的查询操作
	1、DQL_基础查询
		1. 语法：
			select
				字段列表
			from
				表名列表
			where
				条件列表
			group by
				分组字段
			having
				分组之后的条件
			order by
				排序
			limit
				分页限定


		2. 基础查询
			1. 多个字段的查询
				select 字段名1，字段名2... from 表名；
				注意：如果查询所有字段，则可以使用*来替代字段列表。
			2. 去除重复：select distinct 字段名1 from 表名；
			3. 计算列
				1、一般可以使用四则运算计算一些列的值。（一般只会进行数值型的计算）
				2、ifnull(表达式1,表达式2)：null参与的运算，计算结果都为null
					1、表达式1：哪个字段需要判断是否为null
					2、表达式2：如果该字段为null后的替换值。
			4. 起别名：
				1、as：as也可以省略
				2、select 字段名1 别名1，字段名2 as 别名2 from 表名；
	2、DQL_条件查询
		1. where子句后跟条件
		2. 运算符
			1、> 、< 、<= 、>= 、= 、<>
			2、BETWEEN...AND  
			3、IN( 集合) 
			4、LIKE：模糊查询
				1、占位符：
					1、"_":单个任意字符
					2、"%"：多个任意字符
			5、IS NULL  或 IS not NULL
			6、and  或 &&
			7、or  或 || 
			8、not  或 !
	3、DQL_条件查询_模糊查询
		1、LIKE：模糊查询
				1、占位符：
					1、"_":单个任意字符
					2、"%"：多个任意字符
		2、案例：
			-- 1、查询姓马的有哪些？ like
			SELECT * FROM student WHERE NAME LIKE '马%';
			
			-- 2、查询姓名第二个字是化的人
			SELECT * FROM student WHERE NAME LIKE "_化%";
			
			-- 3、查询姓名是3个字的人
			SELECT * FROM student WHERE NAME LIKE '___';
			
			-- 4、查询姓名中包含德的人
			SELECT * FROM student WHERE NAME LIKE '%德%';
	4、DQL_排序查询
		1、语法：order by 子句
			order by 排序字段1 排序方式1 ，  排序字段2 排序方式2...

		2、排序方式：
			1、ASC：升序，默认的。
			2、DESC：降序。

		3、注意：
			如果有多个排序条件，则当前边的条件值一样时，才会判断第二条件。
	5、DQL_聚合函数(计算时不包含null的值)
		1. count：计算个数
			1. 一般选择非空的列：主键
			2. count(*)
		2. max：计算最大值
		3. min：计算最小值
		4. sum：计算和
		5. avg：计算平均值
		
		* 注意：聚合函数的计算，排除null值。
			解决方案：
				1. 选择非空的列进行计算(主键)
				2. IFNULL函数:select count(ifnull(english,0)) from 表名;
	6、DQL_分组查询
		1. 语法：group by 分组字段；
		2. 注意：
			1. 分组之后查询的字段：分组字段、聚合函数
			2. where 和 having 的区别？
				1. where 在分组之前进行限定，如果不满足条件，则不参与分组。having在分组之后进行限定，如果不满足结果，则不会被查询出来
				2. where 后不可以跟聚合函数，having可以进行聚合函数的判断。
				
				
			3、案例：
				-- 1、按照性别分组。分别查询男、女同学的平均分
				SELECT sex , AVG(math) FROM student GROUP BY sex;
				
				-- 2、按照性别分组。分别查询男、女同学的平均分,人数
				SELECT sex , AVG(math),COUNT(id) FROM student GROUP BY sex;
				
				-- 3、按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组
				SELECT sex , AVG(math),COUNT(id) FROM student WHERE math > 70 GROUP BY sex;
				
				-- 4、按照性别分组。分别查询男、女同学的平均分,人数 要求：分数低于70分的人，不参与分组,分组之后。人数要大于2个人
				SELECT sex , AVG(math),COUNT(id) FROM student WHERE math > 70 GROUP BY sex HAVING COUNT(id) > 2;
				SELECT sex , AVG(math),COUNT(id) 人数 FROM student WHERE math > 70 GROUP BY sex HAVING 人数 > 2;
	7、DQL_分页查询
		1. 语法：limit 开始的索引,每页查询的条数;
		2. 公式：开始的索引 = （当前的页码 - 1） * 每页显示的条数
		3、案例：
			-- 每页显示3条记录 
			SELECT * FROM student LIMIT 0,3; -- 第1页
			SELECT * FROM student LIMIT 3,3; -- 第2页
			SELECT * FROM student LIMIT 6,3; -- 第3页
		4. limit 是一个MySQL"方言"
08 表的约束
	1、约束_概述
		1、概念： 对表中的数据进行限定，保证数据的正确性、有效性和完整性。	
		2、分类：
			1. 主键约束：primary key
			2. 非空约束：not null
			3. 唯一约束：unique
			4. 外键约束：foreign key
	2、约束_非空约束:not null，某一列的值不能为null
		1. 创建表时添加约束
			CREATE TABLE stu(
				id INT,
				NAME VARCHAR(20) NOT NULL -- name为非空
			);
		2. 删除name的非空约束
			ALTER TABLE stu MODIFY NAME VARCHAR(20);

		3. 创建表完后，添加非空约束
			ALTER TABLE stu MODIFY NAME VARCHAR(20) NOT NULL;
	3、约束_唯一约束:unique，某一列的值不能重复
		1. 注意：
			唯一约束可以有NULL值，但是只能有一条记录为null
		2. 在创建表时，添加唯一约束
			CREATE TABLE stu(
				id INT,
				phone_number VARCHAR(20) UNIQUE -- 手机号
			);
		3. 删除唯一约束
			ALTER TABLE stu DROP INDEX phone_number;
		4. 在表创建完后，添加唯一约束
			ALTER TABLE stu MODIFY phone_number VARCHAR(20) UNIQUE;
	4、约束_主键约束:primary key
		1. 注意：
			1. 含义：非空且唯一
			2. 一张表只能有一个字段为主键
			3. 主键就是表中记录的唯一标识

		2. 在创建表时，添加主键约束
			create table stu(
				id int primary key,-- 给id添加主键约束
				name varchar(20)
			);
		3. 删除主键
			-- 错误 alter table stu modify id int ;
			ALTER TABLE stu DROP PRIMARY KEY;

		4. 创建完表后，添加主键
			ALTER TABLE stu MODIFY id INT PRIMARY KEY;
	5、约束_主键约束_自动增长
		5. 自动增长：
			1.  概念：如果某一列是数值类型的，使用 auto_increment 可以来完成值得自动增长

			2. 在创建表时，添加主键约束，并且完成主键自增长
			create table stu(
				id int primary key auto_increment,-- 给id添加主键约束
				name varchar(20)
			);

			3. 删除自动增长
			ALTER TABLE stu MODIFY id INT;
			4. 添加自动增长
			ALTER TABLE stu MODIFY id INT AUTO_INCREMENT;
	6、约束_外键约束
		1. 在创建表时，可以添加外键
			语法：
				create table 表名(
					....
					外键列
					constraint 外键名称 foreign key (外键列名称) references 主表名称(主表列名称)
				);

		2. 删除外键
			ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;

		3. 创建表之后，添加外键
			ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称);
	7、约束_外键约束_级联操作
		1、级联操作
			1. 添加级联操作
				语法：ALTER TABLE 表名 ADD CONSTRAINT 外键名称 
						FOREIGN KEY (外键字段名称) REFERENCES 主表名称(主表列名称) ON UPDATE CASCADE ON DELETE CASCADE  ;
			2. 分类：
				1. 级联更新：ON UPDATE CASCADE 
				2. 级联删除：ON DELETE CASCADE 
09 多表操作
	1、多表关系介绍
		1. 分类：
			1. 一对一(了解)：
				* 如：人和身份证
				* 分析：一个人只有一个身份证，一个身份证只能对应一个人
			2. 一对多(多对一)：
				* 如：部门和员工
				* 分析：一个部门有多个员工，一个员工只能对应一个部门
			3. 多对多：
				* 如：学生和课程
				* 分析：一个学生可以选择很多门课程，一个课程也可以被很多学生选择
	2、多表关系_一对多关系实现
		1. 一对多(多对一)：
			1、如：部门和员工
			2、实现方式：在多的一方建立外键，指向一的一方的主键。
	3、多表关系_多对多关系实现
		1. 多对多：
			1、如：学生和课程
			2、实现方式：多对多关系实现需要借助第三张中间表。中间表至少包含两个字段，这两个字段作为第三张表的外键，分别指向两张表的主键
				注意：因为第三张表的字段组合是唯一的可以设置为联合主键
	4、多表关系_一对一关系实现
		1、一对一(了解)：
			1、如：人和身份证
			2、实现方式：一对一关系实现，可以在任意一方添加"唯一"外键指向另一方的主键。
			注意：
				1、设置的外键必须是唯一的
				2、如果是一对一的关系,尝试着合成为一张表
	5、多表关系_案例
		-- 1、创建旅游线路分类表 tab_category
		CREATE TABLE tab_category (
			cid INT PRIMARY KEY AUTO_INCREMENT,
			cname VARCHAR(100) NOT NULL UNIQUE
		);
		-- 2、创建旅游线路表 tab_route
		CREATE TABLE tab_route(
			rid INT PRIMARY KEY AUTO_INCREMENT,
			rname VARCHAR(100) NOT NULL UNIQUE,
			price DOUBLE,
			rdate DATE,
			cid INT,
			FOREIGN KEY (cid) REFERENCES tab_category(cid)
		);
		-- 3、创建用户表 tab_user
		CREATE TABLE tab_user (
			uid INT PRIMARY KEY AUTO_INCREMENT,
			username VARCHAR(100) UNIQUE NOT NULL,
			PASSWORD VARCHAR(30) NOT NULL,
			NAME VARCHAR(100),
			birthday DATE,
			sex CHAR(1) DEFAULT '男',
			telephone VARCHAR(11),
			email VARCHAR(100)
		);
		-- 4、创建收藏表 tab_favorite
		CREATE TABLE tab_favorite (
			rid INT, -- 线路id
			DATE DATETIME,
			uid INT, -- 用户id
			-- 创建复合主键
			PRIMARY KEY(rid,uid), -- 联合主键
			FOREIGN KEY (rid) REFERENCES tab_route(rid),
			FOREIGN KEY(uid) REFERENCES tab_user(uid)
		);
		
		
		
		注意创建联合主键的方式:PRIMARY KEY(rid,uid)
10 三大范式
	1、范式概述
		概念：设计数据库时，需要遵循的一些规范。要遵循后边的范式要求，必须先遵循前边的所有范式要求
	2、三大范式详解
		1、分类：
			1. 第一范式（1NF）：每一列都是不可分割的原子数据项
			2. 第二范式（2NF）：在1NF的基础上，非码属性必须完全依赖于码（在1NF基础上消除非主属性对主码的部分函数依赖）
				* 几个概念：
					1. 函数依赖：A-->B,如果通过A属性(属性组)的值，可以确定唯一B属性的值。则称B依赖于A
						例如：学号-->姓名。  （学号，课程名称） --> 分数
					2. 完全函数依赖：A-->B， 如果A是一个属性组，则B属性值得确定需要依赖于A属性组中所有的属性值。
						例如：（学号，课程名称） --> 分数
					3. 部分函数依赖：A-->B， 如果A是一个属性组，则B属性值得确定只需要依赖于A属性组中某一些值即可。
						例如：（学号，课程名称） -- > 姓名
					4. 传递函数依赖：A-->B, B -- >C . 如果通过A属性(属性组)的值，可以确定唯一B属性的值，在通过B属性（属性组）的值可以确定唯一C属性的值，则称 C 传递函数依赖于A
						例如：学号-->系名，系名-->系主任
					5. 码：如果在一张表中，一个属性或属性组，被其他所有属性所完全依赖，则称这个属性(属性组)为该表的码
						例如：该表中码为：（学号，课程名称）
						* 主属性：码属性组中的所有属性
						* 非主属性：除过码属性组的属性
						
			3. 第三范式（3NF）：在2NF基础上，任何非主属性不依赖于其它非主属性（在2NF基础上消除传递依赖）
			
			1、第一范式:设计表时,字段为不可分割的原子数据项
			2、第二范式：在1NF的基础上,消除非主属性对主码的部分函数依赖
			3、第三范式：在2NF的基础上消除传递依赖
		2、案例分析：
			
			1、主表(学号、姓名、系别、系主任、课程名称、分数)
			2、主表如果存在这些问题：
				1、存在非常严重的数据冗余(重复)
				2、数据添加存在问题：添加数据时,数据不合法,例如只添加新开设的系和系主任时,但是没开学,其他数据为空时,数据不合法
				3、数据删除问题：删除某个数据,会将一些重要的数据也删除。例如删除某一个学生表的学生时,会将系的数据也删除。

			3、主表解决问题一需要使用到第二范式：
				1、使用第二范式得到以下两张表：
					1、选课表(学号、课程名称、分数)
					2、学生表(学号、姓名、系别、系主任)
				2、思路：
					1、主表中码为：（学号，课程名称）
						消除部分依赖,那就改为全部依赖,所以改为选课表(学号，课程名称,分数),因为分数完全依赖于码（学号，课程名称）
					2、剩下的属性(姓名、系别、系主任)因为部分依赖于码(学号、课程名称),完全依赖于学号
						所以形成第二张表：学生表(学号、姓名、系别、系主任)
						
					但是范式二解决不了问题二和问题三
					
					
			4、用满足2NF的两表使用3NF来解决问题二和问题三
				1、思路：因为学号被系名依赖,系名被系主任依赖,形成传递依赖(学号->系名->系主任)
				2、解决：把系名和系主任单独形成一张新表系表(系名、系主任),最终形成三张表：
					1、选课表(学号、课程名称、分数)
					2、学生表(学号、姓名、系别)
					3、系表(系名、系主任)
					
						
					
11 数据库的备份和还原
	1、数据库的备份和还原
		1. 命令行：
			1、语法：
				1、备份： mysqldump -u用户名 -p密码 数据库名称 > 保存的路径
				2、还原：
					1. 登录数据库
					2. 创建数据库
					3. 使用数据库
					4. 执行文件。source 文件路径
		2. 图形化工具：
		
		
		
		
	今日内容
		1. 多表查询
		2. 事务
		3. DCL
12 多表查询
	1、多表查询_概述
		 1、查询语法：
			select
				列名列表
			from
				表名列表
			where....
		2、笛卡尔积：
			1、有两个集合A,B .取这两个集合的所有组成情况。
			2、要完成多表查询，需要消除无用的数据
		3、多表查询的分类：
			1. 内连接查询：
			2. 外链接查询：
			3. 子查询：
	2、多表查询_内连接
		1. 隐式内连接：使用where条件消除无用数据
			1、例子：
				-- 查询所有员工信息和对应的部门信息
				SELECT 
					t1.name, -- 员工表的姓名
					t1.gender,-- 员工表的性别
					t2.name -- 部门表的名称
				FROM
					emp t1,
					dept t2
				WHERE 
					t1.`dept_id` = t2.`id`;
		2. 显式内连接：
			1、语法： select 字段列表 from 表名1 [inner] join 表名2 on 条件
			2、例如：
				1、SELECT * FROM emp INNER JOIN dept ON emp.`dept_id` = dept.`id`;	
				2、SELECT * FROM emp JOIN dept ON emp.`dept_id` = dept.`id`;	
					
					
		3. 内连接查询：
			1. 从哪些表中查询数据(from)
			2. 条件是什么(where)
			3. 查询哪些字段
	3、多表查询_外连接
		1. 左外连接：
			1、语法：select 字段列表 from 表1 left [outer] join 表2 on 条件；
			2、查询的是左表所有数据以及其交集部分。
			3、例子：
				-- 查询所有员工信息，如果员工有部门，则查询部门名称，没有部门，则不显示部门名称
				SELECT 	t1.*,t2.`name` FROM emp t1 LEFT JOIN dept t2 ON t1.`dept_id` = t2.`id`;
		2. 右外连接：
			1、语法：select 字段列表 from 表1 right [outer] join 表2 on 条件；
			2、查询的是右表所有数据以及其交集部分。
			3、例子：
				SELECT 	* FROM dept t2 RIGHT JOIN emp t1 ON t1.`dept_id` = t2.`id`;
13 子查询
	1、多表查询_子查询概述
		1、概念：查询中嵌套查询，称嵌套查询为子查询
	2、多表查询_子查询不同情况
		1. 子查询的结果是单行单列的：
			1、子查询可以作为条件，使用运算符去判断。 运算符： > >= < <= =
				-- 查询员工工资小于平均工资的人
				SELECT * FROM emp WHERE emp.salary < (SELECT AVG(salary) FROM emp);
		2. 子查询的结果是多行单列的：
			1、子查询可以作为条件，使用运算符in来判断
			-- 查询'财务部'和'市场部'所有的员工信息
			SELECT * FROM emp WHERE dept_id IN (SELECT id FROM dept WHERE NAME IN('财务部','市场部'));
		3. 子查询的结果是多行多列的：
			1、子查询可以作为一张虚拟表参与查询
				-- 查询员工入职日期是2011-11-11日之后的员工信息和部门信息
				
				-- 1、子查询
				SELECT * FROM dept t1 ,(SELECT * FROM emp WHERE emp.`join_date` > '2011-11-11') t2
				WHERE t1.id = t2.dept_id;
				
				-- 2、普通内连接
				SELECT * FROM emp t1,dept t2 WHERE t1.`dept_id` = t2.`id` AND t1.`join_date` >  '2011-11-11'
14 多表查询练习
	1、多表查询_练习1
		-- 1.查询所有员工信息。查询员工编号，员工姓名，工资，职务名称，职务描述
			/*
				分析：
					1.员工编号，员工姓名，工资，需要查询emp表  职务名称，职务描述 需要查询job表
					2.查询条件 emp.job_id = job.id
			
			*/
			SELECT 
				t1.`id`, -- 员工编号
				t1.`ename`, -- 员工姓名
				t1.`salary`,-- 工资
				t2.`jname`, -- 职务名称
				t2.`description` -- 职务描述
			FROM 
				emp t1, job t2
			WHERE 
				t1.`job_id` = t2.`id`;
		
		-- 2.查询员工编号，员工姓名，工资，职务名称，职务描述，部门名称，部门位置
			/*
				分析：
					1. 员工编号，员工姓名，工资 emp  职务名称，职务描述 job  部门名称，部门位置 dept
					2. 条件： emp.job_id = job.id and emp.dept_id = dept.id
			*/
			
			SELECT 
				t1.`id`, -- 员工编号
				t1.`ename`, -- 员工姓名
				t1.`salary`,-- 工资
				t2.`jname`, -- 职务名称
				t2.`description`, -- 职务描述
				t3.`dname`, -- 部门名称
				t3.`loc` -- 部门位置
			FROM 
				emp t1, job t2,dept t3
			WHERE 
				t1.`job_id` = t2.`id` AND t1.`dept_id` = t3.`id`;
	2、多表查询_练习2
		-- 3.查询员工姓名，工资，工资等级
			/*
				分析：
					1.员工姓名，工资 emp  工资等级 salarygrade
					2.条件 emp.salary >= salarygrade.losalary and emp.salary <= salarygrade.hisalary
						emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary
			*/
			SELECT 
				t1.ename ,
				t1.`salary`,
				t2.*
			FROM emp t1, salarygrade t2
			WHERE t1.`salary` BETWEEN t2.`losalary` AND t2.`hisalary`;
		-- 4.查询员工姓名，工资，职务名称，职务描述，部门名称，部门位置，工资等级
			/*
				分析：
					1. 员工姓名，工资 emp ， 职务名称，职务描述 job 部门名称，部门位置，dept  工资等级 salarygrade
					2. 条件： emp.job_id = job.id and emp.dept_id = dept.id and emp.salary BETWEEN salarygrade.losalary and salarygrade.hisalary
						
			*/
			SELECT 
				t1.`ename`,
				t1.`salary`,
				t2.`jname`,
				t2.`description`,
				t3.`dname`,
				t3.`loc`,
				t4.`grade`
			FROM 
				emp t1,job t2,dept t3,salarygrade t4
			WHERE 
				t1.`job_id` = t2.`id` 
				AND t1.`dept_id` = t3.`id`
				AND t1.`salary` BETWEEN t4.`losalary` AND t4.`hisalary`;
	3、多表查询_练习3
		-- 5.查询出部门编号、部门名称、部门位置、部门人数
			/*
				分析：
					1.部门编号、部门名称、部门位置 dept 表。 部门人数 emp表
					2.使用分组查询。按照emp.dept_id完成分组，查询count(id)
					3.使用子查询将第2步的查询结果和dept表进行关联查询
					
			*/
			SELECT 
				t1.`id`,t1.`dname`,t1.`loc` , t2.total
			FROM 
				dept t1,
				(SELECT
					dept_id,COUNT(id) total
				FROM 
					emp
				GROUP BY dept_id) t2
			WHERE t1.`id` = t2.dept_id;
			
		-- 6.查询所有员工的姓名及其直接上级的姓名,没有领导的员工也需要查询
			
			/*
				分析：
					1.姓名 emp， 直接上级的姓名 emp
						* emp表的id 和 mgr 是自关联
					2.条件 emp.id = emp.mgr
					3.查询左表的所有数据，和 交集数据
						* 使用左外连接查询
				
			*/
			SELECT 
				t1.ename,
				t1.mgr,
				t2.`id`,
				t2.`ename`
			FROM emp t1
			LEFT JOIN emp t2
			ON t1.`mgr` = t2.`id`;
	
15 事务
	1、事务_基本演示
		1. 概念：
			*  如果一个包含多个步骤的业务操作，被事务管理，那么这些操作要么同时成功，要么同时失败。
			
		2. 操作：
			1. 开启事务： start transaction;
			2. 回滚：rollback;
			3. 提交：commit;
	2、事务_默认自动提交&手动提交
		1、事务提交的两种方式：
			1、自动提交：
				1、mysql就是自动提交的(一条DML(增insert删delete改update)语句会自动提交一次事务。)
			2、手动提交：
				1、Oracle 数据库默认是手动提交事务
				2、即需要先开启事务(start transaction)，再提交(commit)
		2、修改事务的默认提交方式：
			1、查看事务的默认提交方式：SELECT @@autocommit; -- 1 代表自动提交  0 代表手动提交
			2、修改默认提交方式： set @@autocommit = 0;
	3、事务_事务四大特征
		1. 原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败。
		2. 持久性：当事务提交或回滚后，数据库会持久化的保存数据。
		3. 隔离性：多个事务之间。相互独立。
		4. 一致性：事务操作前后，数据总量不变
	4、事务_事务隔离级别介绍
		1、概念：多个事务之间隔离的，相互独立的。但是如果多个事务操作同一批数据，则会引发一些问题，设置不同的隔离级别就可以解决这些问题。
		2、存在问题：
			1. 脏读：一个事务，读取到另一个事务中没有提交的数据
			2. 不可重复读(虚读)：在同一个事务中，两次读取到的数据不一样。
			3. 幻读：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。
		3、隔离级别：
			1. read uncommitted：读未提交
				 产生的问题：脏读、不可重复读、幻读
			2. read committed：读已提交 （Oracle）
				 产生的问题：不可重复读、幻读
			3. repeatable read：可重复读 （MySQL默认）
				 产生的问题：幻读
			4. serializable：串行化
				* 可以解决所有的问题

		4、注意：隔离级别从小到大安全性越来越高，但是效率越来越低
			1、数据库查询隔离级别：
				select @@tx_isolation;
			2、数据库设置隔离级别：
				set global transaction isolation level  级别字符串;
	5、事务_事务隔离级别演示
		set global transaction isolation level read uncommitted;
		start transaction;
		-- 转账操作
		update account set balance = balance - 500 where id = 1;
		update account set balance = balance + 500 where id = 2;
		
		
		
		
	SQL分类：
		1. DDL：操作数据库和表
		2. DML：增删改表中数据
		3. DQL：查询表中数据
		4. DCL：管理用户，授权
16 用户管理和权限管理
	1、DCL_管理用户_增删改查
		1. 添加用户：
			语法：CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';
		2. 删除用户：
			语法：DROP USER '用户名'@'主机名';
		3. 修改用户密码：
			1、普通语句：
				UPDATE USER SET PASSWORD = PASSWORD('新密码') WHERE USER = '用户名';
				UPDATE USER SET PASSWORD = PASSWORD('abc') WHERE USER = 'lisi';
			2、简短语句：
				SET PASSWORD FOR '用户名'@'主机名' = PASSWORD('新密码');
				SET PASSWORD FOR 'root'@'localhost' = PASSWORD('123');
			3、mysql中忘记了root用户的密码？
				1. cmd -- > net stop mysql 停止mysql服务(需要管理员运行该cmd)
				2. 使用无验证方式启动mysql服务： mysqld --skip-grant-tables
				3. 打开新的cmd窗口,直接输入mysql命令，敲回车。就可以登录成功
				4. use mysql;
				5. update user set password = password('你的新密码') where user = 'root';
				6. 关闭两个窗口
				7. 打开任务管理器，手动结束mysqld.exe 的进程
				8. 启动mysql服务
				9. 使用新密码登录。
		4. 查询用户：
			1. 切换到mysql数据库
			USE myql;
			2. 查询user表
			SELECT * FROM USER;
			通配符： % 表示可以在任意主机使用用户登录数据库

	2、DCL_管理权限
		1. 查询权限：
			-- 查询权限
			SHOW GRANTS FOR '用户名'@'主机名';
			SHOW GRANTS FOR 'lisi'@'%';

		2. 授予权限：
			-- 1、授予权限
			grant 权限列表 on 数据库名.表名 to '用户名'@'主机名';
			
			-- 2、给张三用户授予所有权限，在任意数据库任意表上
			GRANT ALL ON *.* TO 'zhangsan'@'localhost';
		3. 撤销权限：
			-- 撤销权限：
			revoke 权限列表 on 数据库名.表名 from '用户名'@'主机名';
			REVOKE UPDATE ON db3.`account` FROM 'lisi'@'%';