01JDBC快速入门
	1、今日内容
		1. JDBC基本概念
		2. JDBC快速入门
		3. 对JDBC中各个接口和类详解
	2、JDBC_概念
		1. 概念：Java DataBase Connectivity  Java 数据库连接， Java语言操作数据库
		2、JDBC本质：其实是官方（sun公司）定义的一套操作所有关系型数据库的规则，即接口。
			各个数据库厂商去实现这套接口，提供数据库驱动jar包。我们可以使用这套接口（JDBC）编程，
			真正执行的代码是驱动jar包中的实现类。
	3、JDBC_快速入门

		1、步骤：
			1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar
				1.复制mysql-connector-java-5.1.37-bin.jar到项目的libs目录下
				2.右键-->Add As Library
			2. 注册驱动(让程序知道是哪一个驱动jar包,有mysql的和oracle等的驱动包)
			3. 获取数据库连接对象 Connection
			4. 定义sql
			5. 获取执行sql语句的对象 Statement
			6. 执行sql，接受返回结果
			7. 处理结果
			8. 释放资源

		2、代码实现：
		  	//1. 导入驱动jar包
	        //2.注册驱动
	        Class.forName("com.mysql.jdbc.Driver");
	        //3.获取数据库连接对象
	        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/db3", "root", "root");
	        //4.定义sql语句
	        String sql = "update account set balance = 500 where id = 1";
	        //5.获取执行sql的对象 Statement
	        Statement stmt = conn.createStatement();
	        //6.执行sql
	        int count = stmt.executeUpdate(sql);
	        //7.处理结果
	        System.out.println(count);
	        //8.释放资源
	        stmt.close();
	        conn.close();
02JDBC各个类详解
	0、详解各个对象：
		1. DriverManager类：驱动管理对象
		2. Connection接口：数据库连接对象
		3. Statement接口：执行sql的对象
		4. ResultSet接口：结果集对象,封装查询结果
		5. PreparedStatement接口：Statement的子接口,执行sql的对象

	1、JDBC各个类详解_DriverManager
		1. DriverManager：驱动管理对象
			1. 注册驱动：告诉程序该使用哪一个数据库驱动jar
				1、static void registerDriver(Driver driver) :注册与给定的驱动程序 DriverManager 。 
				2、写代码使用：  Class.forName("com.mysql.jdbc.Driver");
				3、通过查看源码发现：在com.mysql.jdbc.Driver类中存在静态代码块
					static {
						try {
							java.sql.DriverManager.registerDriver(new Driver());
						} catch (SQLException E) {
							throw new RuntimeException("Can't register driver!");
						}
					}

				4、注意：mysql5之后的驱动jar包可以省略注册驱动的步骤。
			2. 获取数据库连接：
				* 方法：static Connection getConnection(String url, String user, String password) 
				* 参数：
					1、url：指定连接的路径
						1、语法：jdbc:mysql://ip地址(域名):端口号/数据库名称
						2、例子：jdbc:mysql://localhost:3306/db3
						3、细节：如果连接的是本机mysql服务器，并且mysql服务默认端口是3306，则url可以简写为：jdbc:mysql:///数据库名称
					2、user：用户名
					3、password：密码 
	
	2、JDBC各个类详解_Connection
		1. 获取执行sql 的对象
			1、Statement createStatement()
			2、PreparedStatement prepareStatement(String sql)  
		2. 管理事务：
			1、开启事务：void setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务
			2、提交事务：void commit() 
			3、回滚事务：void rollback() 
	3、JDBC各个类详解_Statement
		1. 执行sql
			1. boolean execute(String sql) ：可以执行任意的sql(了解) 
			2. int executeUpdate(String sql) ：执行DML（insert、update、delete）语句、DDL(create，alter、drop)语句
				返回值：影响的行数，可以通过这个影响的行数判断DML语句是否执行成功 返回值>0的则执行成功，反之，则失败。
			3. ResultSet executeQuery(String sql)  ：执行DQL（select)语句
			
		2. 练习：
			1. account表 添加一条记录
			2. account表 修改记录
			3. account表 删除一条记录
			
			
			代码：
				Statement stmt = null;
				Connection conn = null;
				try {
					//1. 注册驱动
					Class.forName("com.mysql.jdbc.Driver");
					//2. 定义sql
					String sql = "insert into account values(null,'王五',3000)";
					//3.获取Connection对象
					conn = DriverManager.getConnection("jdbc:mysql:///db3", "root", "root");
					//4.获取执行sql的对象 Statement
					stmt = conn.createStatement();
					//5.执行sql
					int count = stmt.executeUpdate(sql);//影响的行数
					//6.处理结果
					System.out.println(count);
					if(count > 0){
						System.out.println("添加成功！");
					}else{
						System.out.println("添加失败！");
					}
		
				} catch (ClassNotFoundException e) {
					e.printStackTrace();
				} catch (SQLException e) {
					e.printStackTrace();
				}finally {
					//stmt.close();
					//7. 释放资源
					//避免空指针异常
					if(stmt != null){
						try {
							stmt.close();
						} catch (SQLException e) {
							e.printStackTrace();
						}
					}
		
					if(conn != null){
						try {
							conn.close();
						} catch (SQLException e) {
							e.printStackTrace();
						}
					}
				}
03JDBC之CRUD练习
	1、JDBC练习_insert语句
		String sql = "insert into account values(null,'王五',3000)";
	2、JDBC练习_update语句
		String sql = "update account set balance = 1500 where id = 3";
	3、JDBC练习_update、DDL语句
		String sql = "delete from account where id = 3";
		String sql = "create table student(id int,name varchar(20))";
04ResultSet类详解
	1、_JDBC各个类详解_ResultSet_基本使用
		1、ResultSet：结果集对象,封装查询结果
			1、boolean next(): 游标向下移动一行，判断当前行是否是最后一行末尾(是否有数据)，如果是，则返回false，如果不是则返回true
			2、getXxx(参数):获取数据
				1、Xxx：代表数据类型   如： int getInt() ,	String getString()
				2、参数：
					1. int：代表列的编号,从1开始   如： getString(1)
					2. String：代表列名称。 如： getDouble("balance")
	2、JDBC各个类详解_ResultSet_遍历结果集
		1、使用步骤：
			1. 游标向下移动一行
			2. 判断是否有数据
			3. 获取数据
		2、案例代码：
			//循环判断游标是否是最后一行末尾。
			while(rs.next()){
				//获取数据
				int id = rs.getInt(1);
				String name = rs.getString("name");
				double balance = rs.getDouble(3);
				System.out.println(id + "---" + name + "---" + balance);
			}
05JDBC登录案例练习
	1、JDBC练习_select语句
		1、定义一个方法，查询emp表的数据将其封装为对象，然后装载集合，返回。
			1. 定义Emp类
			2. 定义方法 public List<Emp> findAll(){}
			3. 实现方法 select * from emp;
	2、JDBC工具类(一个静态代码块、三个方法)
		1、目的：简化书写
		2、分析：
			1、需求：不想传递参数（麻烦），还得保证工具类的通用性。
			2、解决：配置文件
				1、在src路径下创建jdbc.properties配置文件
					url=jdbc:mysql://localhost:3306/db1
					user=root
					password=root
					driver=com.mysql.jdbc.Driver
				2、创建一个JDBCUtils类
					1、使用静态代码块读取配置文件
					2、创建一个获取连接对象和注册驱动的静态方法(getConnection)
					3、创建一个释放资源的close()方法(参数是Statement和Connection)
					4、创建一个重载释放资源的close()方法(参数是ResultSet和Statement和Connection)
					
					
		3、注意事项：
			1、获取src目录下资源路径需要使用到ClassLoader类加载器
				ClassLoader classLoader = JDBCUtils.class.getClassLoader();
				URL resource = classLoader.getResource("jdbc.properties");
				String path = resource.getPath();
				pro.load(new FileWriter(path));
	3、JDBC练习_登录案例
		1、需求：
			1. 通过键盘录入用户名和密码
			2. 判断用户是否登录成功
				1、select * from user where username = "" and password = "";
				2、如果这个sql有查询结果，则成功，反之，则失败

		2、步骤：
			1. 创建数据库表 user
				CREATE TABLE USER(
					id INT PRIMARY KEY AUTO_INCREMENT,
					username VARCHAR(32),
					PASSWORD VARCHAR(32)
				
				);

				INSERT INTO USER VALUES(NULL,'zhangsan','123');
				INSERT INTO USER VALUES(NULL,'lisi','234');

			2. 代码实现：
				1、创建一个方法判断登录释放成功
				2、创建一个主方法键盘输入账号和密码
06PreparedStatement类详解
	1、JDBC各个类详解_PreparedStatement
		1. SQL注入问题：在拼接sql时，有一些sql的特殊关键字参与字符串的拼接。会造成安全性问题
			1. 输入用户随便，输入密码：a' or 'a' = 'a
			2. sql：select * from user where username = 'fhdsjkf' and password = 'a' or 'a' = 'a' 

		2. 解决sql注入问题：使用PreparedStatement对象来解决
		3. 预编译的SQL：参数使用?作为占位符
		4. 步骤：
			1. 导入驱动jar包 mysql-connector-java-5.1.37-bin.jar
			2. 注册驱动
			3. 获取数据库连接对象 Connection
		***	4. 定义sql
				注意：sql的参数使用？作为占位符。 如：select * from user where username = ? and password = ?;
		***	5. 获取执行sql语句的对象 PreparedStatement  Connection.prepareStatement(String sql) 
		***	6. 给？赋值：
				方法： setXxx(参数1,参数2)
					1、参数1：？的位置编号 从1 开始
					2、参数2：？的值
		***	7. 执行sql，接受返回结果，不需要传递sql语句
			8. 处理结果
			9. 释放资源

		5. 注意：后期都会使用PreparedStatement来完成增删改查的所有操作
			1. 可以防止SQL注入
			2. 效率更高
07JDBC事务管理
	1、JDBC管理事务_概述
		1. 事务：一个包含多个步骤的业务操作。如果这个业务操作被事务管理，则这多个步骤要么同时成功，要么同时失败。
		2. 操作：
			1. 开启事务
			2. 提交事务
			3. 回滚事务
		3. 使用Connection对象来管理事务
			1、开启事务：setAutoCommit(boolean autoCommit) ：调用该方法设置参数为false，即开启事务
				在执行sql之前开启事务
			2、提交事务：commit() 
				当所有sql都执行完提交事务
			3、回滚事务：rollback() 
				在catch中回滚事务
	2、JDBC管理事务_实现
		public void transfer(){
			Connection conn = null;
			PreparedStatement pstmt1 = null;
			PreparedStatement pstmt2 = null;
			try {
				conn = JDBCUtils.getConnection();
				conn.setAutoCommit(false);
				String sql1 = "update account set balance = balance - ? where id = ?";
				String sql2 = "update account set balance = balance + ? where id = ?";
				pstmt1 = conn.prepareStatement(sql1);
				pstmt2 = conn.prepareStatement(sql2);

				pstmt1.setDouble(1,500);
				pstmt1.setDouble(2,1);
				pstmt2.setDouble(1,500);
				pstmt2.setDouble(2,2);

				int count1 = pstmt1.executeUpdate();
				//int i = 3/0;
				int count2 = pstmt2.executeUpdate();
				if(count1 > 0 && count2 > 0){
					System.out.println("转账成功");
					conn.commit();
				}else {
					System.out.println("转账失败");
					conn.rollback();
				}
			} catch (Exception e) {
				if(conn!=null){
					try {
						conn.rollback();
					} catch (SQLException e1) {
						e1.printStackTrace();
					}
				}
				e.printStackTrace();
			}finally {
				JDBCUtils.close(pstmt1);
				JDBCUtils.close(pstmt2,conn);
			}
		}
08 数据库连接池
	1、今日内容
		1. 数据库连接池
		2. Spring JDBC : JDBC Template
	2、数据库连接池_概述
		1. 概念：其实就是一个容器(集合)，存放数据库连接的容器。
			当系统初始化好后，容器被创建，容器中会申请一些连接对象，当用户来访问数据库时，从容器中获取连接对象，
			用户访问完之后，会将连接对象归还给容器。

		2. 好处：
			1. 节约资源
			2. 用户访问高效
	3、数据库连接池_实现介绍
		1. 标准接口：DataSource   javax.sql包下的
			1. 方法：
				1、获取连接：getConnection()
				2、归还连接：Connection.close()。如果连接对象Connection是从连接池中获取的，那么调用Connection.close()方法，
					则不会再关闭连接了。而是归还连接

		2. 一般我们不去实现它，有数据库厂商来实现
			1. C3P0：数据库连接池技术
			2. Druid：数据库连接池实现技术，由阿里巴巴提供的
	4、数据库连接池_c3p0_基本使用
		C3P0：数据库连接池技术
			1、步骤：
				1. 导入jar包 (两个) c3p0-0.9.5.2.jar mchange-commons-java-0.2.12.jar ，
					* 不要忘记导入数据库驱动jar包
				2. 定义配置文件：
					* 名称： c3p0.properties 或者 c3p0-config.xml
					* 路径：直接将文件放在src目录下即可。

				3. 创建核心对象 数据库连接池对象 ComboPooledDataSource
				4. 获取连接： getConnection
			2、代码：
				 //1.创建数据库连接池对象
				DataSource ds  = new ComboPooledDataSource();
				//2. 获取连接对象
				Connection conn = ds.getConnection();
	5、数据库连接池_c3p0_配置演示
		1、配置文件里面可以配置多个连接池。
			1、无参使用默认配置连接池
				DataSource ds  = new ComboPooledDataSource();
			2、有参使用特定名称的配置连接池：
				DataSource ds  = new ComboPooledDataSource("otherc3p0");
				
				
				xml文件中：
				<named-config name="otherc3p0">
	6、数据库连接池_druid_基本使用
		Druid：数据库连接池实现技术，由阿里巴巴提供的
		1. 步骤：
			1. 导入jar包 druid-1.0.9.jar
			2. 定义配置文件：
				1、是properties形式的
				2、可以叫任意名称，可以放在任意目录下(一般放在src目录下)
			3. 加载配置文件。Properties
			4. 获取数据库连接池对象：通过工厂类来获取  DruidDataSourceFactory
			5. 获取连接：getConnection
		2、代码：
			 //3.加载配置文件
	        Properties pro = new Properties();
	        InputStream is = DruidDemo.class.getClassLoader().getResourceAsStream("druid.properties");
	        pro.load(is);
	        //4.获取连接池对象
	        DataSource ds = DruidDataSourceFactory.createDataSource(pro);
	        //5.获取连接
	        Connection conn = ds.getConnection();
	7、数据库连接池_druid_工具类
		1. 定义一个类 JDBCUtils
		2. 提供静态代码块加载配置文件，初始化连接池对象
		3. 提供方法
			1. 获取连接方法：通过数据库连接池获取连接
			2. 释放资源方法
			3. 获取连接池的方法
			
		* 代码：
			public class JDBCUtils {
			    //1.定义成员变量 DataSource
			    private static DataSource ds ;
			    static{
			        try {
			            //1.加载配置文件
			            Properties pro = new Properties();
			            pro.load(JDBCUtils.class.getClassLoader().getResourceAsStream("druid.properties"));
			            //2.获取DataSource
			            ds = DruidDataSourceFactory.createDataSource(pro);
			        } catch (IOException e) {
			            e.printStackTrace();
			        } catch (Exception e) {
			            e.printStackTrace();
			        }
			    }
			    /**
			     * 获取连接
			     */
			    public static Connection getConnection() throws SQLException {
			        return ds.getConnection();
			    }
			    /**
			     * 释放资源
			     */
			    public static void close(Statement stmt,Connection conn){
			       close(null,stmt,conn);
			    }
			    public static void close(ResultSet rs , Statement stmt, Connection conn){
			        if(rs != null){
			            try {
			                rs.close();
			            } catch (SQLException e) {
			                e.printStackTrace();
			            }
			        }
			        if(stmt != null){
			            try {
			                stmt.close();
			            } catch (SQLException e) {
			                e.printStackTrace();
			            }
			        }
			        if(conn != null){
			            try {
			                conn.close();//归还连接
			            } catch (SQLException e) {
			                e.printStackTrace();
			            }
			        }
			    }
			
			    /**
			     * 获取连接池方法
			     */
			
			    public static DataSource getDataSource(){
			        return  ds;
			    }
			
			}
	8、数据库连接池_druid_工具类测试
		
09 JDBCTemplate
	1、JDBCTemplate_介绍
		1、Spring框架对JDBC的简单封装。提供了一个JDBCTemplate对象简化JDBC的开发
		
	2、JDBCTemplate_快速入门
		步骤：
			1. 导入jar包
			2. 创建JdbcTemplate对象。依赖于数据源DataSource(数据库连接池对象)
				JdbcTemplate template = new JdbcTemplate(ds);
			3. 调用JdbcTemplate的方法来完成CRUD的操作
				1、update():执行DML语句。增、删、改语句
				2、queryForMap():查询结果将结果集封装为map集合，将列名作为key，将值作为value 将这条记录封装为一个map集合
					注意：这个方法查询的结果集长度只能是1
				3、queryForList():查询结果将结果集封装为list集合
					注意：将每一条记录封装为一个Map集合，再将Map集合装载到List集合中
				4、query():查询结果，将结果封装为JavaBean对象
					1、query的参数：RowMapper
						1、一般我们使用BeanPropertyRowMapper实现类。可以完成数据到JavaBean的自动封装
						2、new BeanPropertyRowMapper<类型>(类型.class)
				5、queryForObject：查询结果，将结果封装为对象
					一般用于聚合函数的查询
	3、JDBCTemplate_执行DML语句
		1、需求：
			1. 修改1号数据的 salary 为 10000
				@Test
				public void test_1(){
					String sql = "update emp set salary = ? where id = ?";
					int count = template.update(sql,10000,1001);
					Assert.assertEquals(1, count);
				}
			2. 添加一条记录
				@Test
				public void test_2(){
					String sql = "INSERT INTO emp(id,ename,dept_id) VALUES(?,?,?)";
					int count = template.update(sql,1015,"郭靖",10);
					Assert.assertEquals(1, count);
				}
			3. 删除刚才添加的记录
				@Test
				public void test_3(){
					String sql = "delete from emp where id = ?";
					int count = template.update(sql,1015);
					Assert.assertEquals(1, count);
				}
	4、JDBCTemplate_执行DQL语句
		1、需求：
			4. 查询id为1001的记录，将其封装为Map集合
				@Test
				public void test_4(){
					String sql = "select * from emp where id = ?";
					Map<String,Object> map = template.queryForMap(sql,1001);
					System.out.println(map);
					//Assert.assertEquals(1, map);
				}
			5. 查询所有记录，将其封装为List
				@Test
				public void test_5(){
					String sql = "select * from emp";
					List<Map<String,Object>> list = template.queryForList(sql);
					for (Map<String, Object> stringObjectMap : list) {
						System.out.println(stringObjectMap);
					}
					//Assert.assertEquals(1, map);
				}
			6. 查询所有记录，将其封装为Emp对象的List集合
				@Test
				public void test_6(){
					String sql = "select * from emp";
					List<Emp> list = template.query(sql, new BeanPropertyRowMapper<Emp>(Emp.class));
					for (Emp emp : list) {
						System.out.println(emp);
					}
					//Assert.assertEquals(1, map);
				}
			7. 查询总记录数
				@Test
				public void test_7(){
					String sql = "select count(id) from emp";
					long count = template.queryForObject(sql, Long.class);
					Assert.assertEquals(14, count);
				}