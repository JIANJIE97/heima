常用API类
java.util包下的：Scanner\Random\ArrayList\Arrays\Math
java.lang包下的：String




第1节 Scanner类
	1、API概述和使用步骤
		1、API(Application Programming Interface)应用程序编程接口，JAVA	API是一本程序员的字典
		2、使用API的步骤：
			1、查看包。java.lang下的类不需要导包，其他的要导包
			2、查看构造方法
			3、查看成员方法
		3、API中文文档，sun公司只更新到1.6(文档以chm结尾)
	2、Scanner概述及其API文档
		1、Scanner类的功能：可以实现键盘输入数据到程序当中
		2、引用类型的一般使用步骤
			1、导包
				import 包路径.类名称;
				注意事项1：如果需要使用的目标类，和当前类位于同一个包下，则可以省略导包语句不写;
				注意事项2：只有java.lang包下的内容不需要导包，其他的包都需要import语句;
				
			2、创建
				类名称 对象名 = new 类名称();
			3、使用
				对象名.成员方法名()
	3、Scanner的使用步骤
		1、导包
				import 包路径.类名称;
				import java.util.Scanner;
			2、创建
				类名称 对象名 = new 类名称();
				Scanner sc = new Scanner(System.in);//System.in代表从键盘进行输入
			3、使用
				1、获取键盘输入的一个int数字：int num = sc.nextInt();
				1、获取键盘输入的一个字符串：String str = sc.next();
				
				注意：其实不管在键盘上输入什么其实都是字符串，nextInt()只是把字符串转换为int类型而已,next把字符串原样返回
	4、Scanner练习一_键盘输入两个数字并求出和
	5、Scanner练习二_键盘输入三个数字并求出最大值
第2节 匿名对象
	1、匿名对象的说明
		1、说明：匿名对象就是只有右边的对象，没有左边的名字和赋值运算符。	//new	类名称()
		2、注意事项：匿名对象只能使用唯一的一次，下次再用不得不再创建一个新的对象
		3、使用建议：如果确定有一个对象只需要使用唯一的一次，就可以使用匿名对象
	2、匿名对象作为方法的参数
		匿名对象可以作为方法的参数和返回值
第3节 Random类
	1、Random概述和基本使用
		1、概述：Random类用来生成随机数字。使用起来也是三个步骤
		2、步骤：
			1、导包
				import java.util.Random;
			2、创建
				Random r = new Random();	//无参表明范围是int类型的范围（大约是-21亿到+21亿）
			3、使用
				int num = r.nextInt();
				获取一个随机的int数字（范围是int所有范围，有正负两种）
	2、Random生成指定范围的随机数
		int num = r.nextInt(3);			//实际上代表的含义是：[0,3),也就是0~2
		获取一个随机的int数字（参数代表了范围，左闭右开区间）
	3、Random练习一_生成1-n之间的随机数范围是：[1,n]
		思路：先获取到[0,n)的随机数，然后整体+1就等于[1,n+1)   =>  [1,n]
	4、Random练习二_猜数字小游戏
		关键点：猜错了需要重试，循环次数不一定适用while(true)循环
第4节 ArrayList集合
	1、对象数组
		1、数据可以存放字符串或者对象这些引用类型
		2、数组有一个缺点：一旦创建，程序运行期间长度不可以改变
		3、另一种也可以存放统一类型的多个数据的数据类型叫做：ArraryList集合
	2、ArrayList集合概述和基本使用
		1、数组的长度不可以发生改变。但是ArrayList集合的长度是可以随便变化的。
		2、对于ArrayList来说，有一个尖括号<E>代表泛型;
			泛型：也就是装在集合当中的所有元素，全部都是统一的类型。（注意：泛型只能是引用类型，不能是基本类型）
		3、注意事项：对于ArrayList集合来说，直接打印对象名得到的不是地址值，而是内容，如果内容为空，得到的是空的中括号：[];
			为什么得到的是结果值，而不是像之前的一样得到的是地址值呢。原因是对结果使用了toString()
			
		4、创建一个ArrayList集合的例子：
			ArrayList<String> list = new ArrayList<>();
			注意：从JDK1.7开始，右侧的尖括号内部可以不写内容，但是尖括号<>还是要写的。1.7以前的内容不能省略
		5、向集合当中添加一些数据，需要用到add方法
			集合名称.add(实参);
			注意：定义时泛型的类型必须与实参的类型保持一致不然会报错
	3、ArrayList集合的常用方法和遍历集合
		1、ArrayList当中的常用方法有：
			1、public boolean add(E e):向集合当中添加元素，参数的类型和泛型一致
				注意：对于ArrayList来说，add()添加动作一定是成功的，所以返回值可用可不用;但是对于其他集合（今后学习）来说，add添加动作不一定成功
			2、public E get(int index):从集合当中获取元素，参数是索引编号，返回值就是对应位置的元素
			3、public E remove(int index):从集合当中删除元素，参数是索引编号，返回值就是被删除掉的元素。
			4、public int size():获取集合的尺寸长度，返回是集合中包含的元素个数;
			
			注意：其中的index索引值是从0开始
		2、遍历ArrayList集合的方法就是使用for循环，需要修改的只是求集合长度使用size()方法，求结果使用get()方法
	4、ArrayList集合存储基本数据
		1、如果希望集合ArrayList当中存储基本类型数据，必须使用基本类型对应的“包装类”。
			基本类型	包装类（引用类型（包装类）都位于java.lang包下）
			byte		Byte
			short		Short
			int			Integer		【特殊】
			lang		Lang
			float		Float
			double		Double
			char		Character	【特殊】
			boolean		Boolean
			
		2、注意：从JDK1.5+开始，支持自动装箱、自动拆箱
			自动装箱：基本类型	--》包装类型
			自动拆箱：包装类型	--》基本类型
	5、ArrayList练习一_存储随机数（考的是存储基本数据类型）
		题目：生成6个1~33之间的随机整数，添加到集合，并遍历集合。
	6、ArrayList练习二_存储自定义对象（考的是存储引用数据类型）
		题目：自定义4个学生对象，添加到集合，并遍历集合。
	7、ArrayList练习三_按指定格式打印集合（考的是如何把集合作为参数）
		题目：定义以指定格式打印集合的方法{ArrayList类型作为参数},使用{}括起集合，使用@分割每一个元素。格式参照{元素@元素@元素}
	8、ArrayList练习四_筛选集合元素（考的是以集合作为返回值类型）
		题目：用一个大集合存入20个随机数字，然后筛选其中的偶数元素，放到小集合当中。要求使用自定义的方法来实现筛选。
第5节 String类
	1、字符串概述和特点
		1、java.lang.String类代表字符串
		2、Java程序当中的所有字符串字面值（如“abc”）都作为此类的实例实现，其实就是说：程序当中所有的双引号字符串，都是String类的对象(就算没有new,照样也是)
		3、字符串的特点：
		***	1、字符串的内容永不可变！！！【重点！重点！重点！】
			2、正是因为字符串的不可变，所以字符串是可以共享使用的。
			（字符串是不可变的，所以为了节约空间，相同内容的字符串可以共享使用。当然前提是字符串是不可变的）
			3、字符串效果上相当于char[]字符数组，但是底层原理是byte[]字节数组
	2、字符串的构造方法和直接创建
		1、创建字符串的3+1种方式
			1、三种构造方法：
				1、public String()	创建一个空白字符串，不含有任何内容
				2、public String(char[] array)	根据字符数组的内容，来创建对应的字符串。
					char[] char1 = {'A','B','C'};
					String str = new String(char1);
				3、public String(byte[] array) 根据字节数组的内容，来创建对应的字符串。
					byte[] byte1 = {97,98,99};
					String str = new String(byte1);
			2、一种直接创建：
				String str = "Hello":		右边直接用双引号
				注意：直接写上双引号，就是字符串对象。不管你new不new
	3、字符串的常量池
		1、字符串常量池：程序当中直接写上的双引号字符串，就在字符串常量池当中
		2、==符号的使用区别
			对于基本类型来说，==是进行数值的比较。
			对于引用类型来说，==是进行【地址值】的比较
		3、创建字符串，在内存中的进行的流程
			1、堆内存中的字符串常量池有字符串对象，常量池中的对象是直接使用双引号创建的。其中保存的是字符串对应的字节数组的地址
			2、堆内存中直接保存的字符串对象是使用构造方法创建的。如果是使用字符数组创建，需要先把字符数组转换为字节数组，然后再把地址给堆内存当中的字符串对象
			
			注意点：
				1、对于引用类型来说，==是进行【地址值】的比较
				2、双引号直接写的字符串在常量池当中，new的不在常量池当中
				
				
	**	常用方法：
			1、比较方法:equals(object obj)、equalsIgnoreCase(String str)
			2、获取方法：length()、concat(String str)、charAt(int index)、indexOf(String str)
			3、截取方法：substring(int begin,int end)
			4、转换方法：toCharArray()、getBytes()、replace(charSequence oldString,charSequence newString)
			5、分割方法：split(String regex)
	4、字符串的比较相关方法(2种方法)
		==是进行对象的地址值比较（基本数据类型值比较，引用数据类型地址值比较），如果确实需要字符串的内容比较，可以使用两种方法
		1、equals(object obj)
			public boolean equals(object obj):参数可以是任何对象，只有对象是一个字符串并且内容相同的才会给true，否则返回false（相同地址的对象进行比较也会返回true）
			
			注意事项：
				1、任何对象都能用object进行接收
				2、equals方法具有对称性，也就是a.equals(b)和b.equals(a)效果是一样的
				3、如果比较双方一个常量一个变量，推荐把常量写在前面。
					推荐："abc".equals(str)		不推荐：str.equals("abc");
					原因：如果变量是null的话,null调用方法会报空指针异常(NullPointException)
		2、equalsIgnoreCase(String str)
			public boolean equalsIgnoreCase(String str):忽略英文的大小写，进行内容比较
	5、字符串的获取相关方法(4种方法)
		 1、String当中与获取相关的4种常用方法
			1、public int length():获取当前字符串当中含有的字符个数，拿到字符串长度。
			2、public String concat(String str)：将当前字符串和参数字符串进行拼接并返回新的字符串
				（重点是不会改变字符串，只是产生新的字符串;一般看起来字符串是改变的其实都是产生新的字符串）
			3、public char charAt(int index):获取指定索引位置的单个字符（索引值从0开始）	如果超出范围会抛出字符串下标越界异常StringIndexOutOfBoundsException
			4、public int indexOf(String str):查找参数字符串在当前字符串中首次出现的索引位置，如果没有返回-1
			
			记忆四种方法的方式：获取字符串的长度(length)/进行字符串拼接的函数(+)/获取指定位置字符的函数(获取字符)/获取参数字符串在当前字符串中的位置的函数(获取位置)
	6、字符串的截取方法(1种方法)
		1、public String substring(int index):截取从参数位置一直到字符串末尾，返回新的字符串。
		2、public String substring(int begin,int end):截取从begin开始，一直到end结束中间的字符串。（[begin,end)左闭右开，包含左边，不包含右边的）
		3、注意事项：
			1、截取之后原字符串的内容是不会改变的
			2、String str = "Java";str = "c";
				这种写法，字符串的内容仍然没有改变，当中保存的其实是地址值，改变的只是地址值，里面的内容没有改变
	7、字符串的转换相关方法(3种方法)
		1、public char[] toCharArray():将当前字符串拆分成为字符数组作为返回值
		2、public byte[] getBytes():获取当前字符串底层的字节数组
		3、public String replace(charSequence oldString,charSequence newString)
			目前先把charSequence当成字符串使用
			将所有出现的老字符串替换成为新的字符串，返回替换后的新的字符串（注意原字符没有改变只是生成新的字符串而已）
	8、字符串的分割方法(1种方法)
		1、public Strin[] split(String regex):按照参数的规则，将字符串切割成为若干部分
		2、注意事项：
			1、split方法的参数其实是一个正则表达式（今后学习）
			2、今天要注意的是，如果按照因为句点"."进行切分，必须写"\\."(两个反斜杠)
	9、练习：按指定格式拼接字符
		题目：定义一个方法，把数组{1,2,3}按照指定格式拼接成为一个字符串。格式：[word1#word2#word3]
	10、练习：统计输入的字符串中各种字符出现的次数
		1、题目：键盘输入一个字符串，并且统计其中各种字符出现的次数。种类有：大写字母、小写字母、数字、其他
		2、思路：
			1、使用Scanner的next方法获取键盘的输入值
			2、使用String的toCharArray()转换为字符数组
			3、判断是否是大写字母\小写字母\数字\其他（'A'<=ch&&ch<='Z'）
第6节 static静态
	1、静态static关键字概述
		1、一旦使用了static关键字，那么这样的内容不再属于对象自己的，而是属于类的，所以凡是本类的对象，都共享一份
	2、静态static关键字修饰成员变量
		1、对于静态关键字修饰的成员变量叫做静态成员变量，对所有对象共享数据，即对象一次赋值，多个对象共享使用
	3、静态static关键字修饰成员方法
		1、如果没有static关键字，那么必须首先创建对象，然后通过对象才能使用它。
		2、如果有了static关键字，那么不需要创建创建对象，直接就能使用类名称来使用它
			对象名.静态方法名()	--不推荐，因为容易让人以为这是一个成员方法。而且在编译之后会被javac翻译成为"类名.静态方法名()"
			类名.静态方法名()	--推荐
			
		3、无论是成员变量还是成员方法，如果有了static,都推荐使用类名称来调用。
			1、静态变量：类名.静态变量
			2、静态方法：类名.静态方法()
		4、注意事项：
			1、对于本类当中的静态方法，可以省略类名称。而且在编译之后也会被javac翻译成为"类名.静态方法名()"
		***	2、静态只能访问静态,静态不能访问非静态【重点！重点！重点！】					--先人只知道先人的事情，不知道后人的事情。但是后人知道先人的事情
				原因：内存当中是【先】有的静态内容，【后】有的非静态内容
				记忆方式："先人不知道后人，但是后人知道先人"			--把静态的比作先人，因为静态的先创建
				
			3、静态方法中不能使用this
				原因：this表示当前对象，通过谁调用的方法，谁就是当前对象。但是静态方法调用时不是使用对象来调用的。所以就矛盾了
	4、静态static的内存图
		1、根据类名访问静态成员变量时，全程和对象没有关系，只和类有关系
		2、静态成员变量在编译时，在方法区里面存在一个静态区，是专门用来存放静态变量的。方法区中类的字节文件中的静态成员变量指向静态区
	5、静态代码块
		1、静态代码块的格式是：
			public class 类名称{
				static {
					//静态代码块内容
				}
			}
		2、特点：当第一次用到本类时（创建对象时），静态代码块执行唯一的一次。
			静态内容总是优先于非静态内容，所以静态代码块比构造方法优先执行。
			
		3、静态代码块的典型用途：用来一次性的对静态成员变量进行赋值。（为jdbc的驱动注册）
第7节 Arrays工具类
	1、数组工具类Arrays
		1、java.util.Arrays是一个与数组相关的工具类，里面提供了大量静态方法，用来实现数组常见的操作
		2、Arrays常见的静态方法：
			1、public static String toString(数组)：将参数数组变成字符串（按照默认格式：[元素1,元素2,元素3...]）
			2、public static void sort(数组)：按照默认升序（从小到大）对数组的袁术进行排序
			
		3、注意事项：
			1、如果是数值，sort默认按照升序从小到大
			2、如果是字符串，sort默认按照字母升序
			3、如果是自定义的类型，那么这个自定义的类需要有Comparable或Comparator接口的支持。（今后学习）
	2、Arrays练习：字符串倒序排列
		题目：请使用Arrays相关的API，将一个随机字符串中的所有字符升序排列，并倒序打印
		//str.toCharArray()、Arrays.sort()、倒序打印使用for循环（定义i的初始值为数组的长度-1，循环条件是i>=0,步进语句是i--）
第8节 Math类
	1、数学工具类Math
		1、java.util.Math类是数学相关的工具类，里面提供了大量的静态方法，完成与数学运算相关的操作
		2、常见的静态方法：
			1、public static 数字类型 abs(数字类型 num):获取绝对值，有多种重载
			2、public static 数字类型 ceil(数字类型 num):向上取整（向正方向取整）			//注意如果是3.0向上取整的话还是3.0
			3、public static 数字类型 floor(数字类型 num):向下取整（向负方向取整）			//注意如果是3.0向下取整的话还是3.0
			4、public static double/float round(double/float num):四舍五入
		3、Math的静态常量：
			Math.PI是圆周率π
	2、Math练习：小学数学真题
		题目：计算在-10.8到5.9之间，绝对值大于6或者小于2.1的整数有多少个？
		//使用for循环（初始值使用ceil方法）、使用abs求绝对值