1、数组的概念
	1、数组的概念：是一种容器，可以同时存放多个数据值
	2、数组的三个特点：
		1、数组是一个引用数据类型
		2、数组当中的多个数据，类型必须统一
		3、数组的长度在程序运行期间不可改变
2、数组的定义格式一_动态初始化
	1、数组的初始化：在内存当中创建一个数组，并且向其中赋予一些默认值。
	2、两常见的初始化方式
		1、动态初始化（指定长度）
		2、静态初始化（指定内容）
	3、动态初始化数组的格式：
		数据类型[] 数组名称 = new 数据类型[数组长度];
	4、解析格式含义：
		1、左侧数据类型：也是数组当中保存的数据，全都是统一的类型
		2、左侧的中括号：代表我是一个数组
		3、左侧数组的名称：给数组取一个名字
		
		4、右侧的new：代表创建数组的动作
		5、右侧数据类型：必须和左边的数据类型一致
		6、右侧中括号的数字：也就是数组当中，到底可以保存多少个数据，是一个int数字
3、数组的定义格式二_静态初始化
	1、动态初始化（指定长度）：在创建数组的时候，直接指定数组当中的数据元素个数
	2、静态初始化（指定内容）：在创建数组的时候，不直接指定元素个数多少，而是直接将具体的数据内容进行指定。
	3、静态初始化基本格式：
		数据类型[] 数组名称 = new 数据类型[] {元素1,元素2,...};
	4、注意事项：
		虽然静态初始化没有直接告诉长度，但是根据大括号里面的元素具体内容，也可以自动推算出长度
4、数组的定义格式三_省略的静态初始化
	1、静态初始化定义格式：
		1、标准格式：
			数据类型[] 数组名称 = new 数据类型[] {元素1,元素2,...};
		2、省略格式
			数据类型[] 数组名称 = {元素1,元素2,...};
	2、注意事项：
		1、静态初始化虽然没有指定长度，但是仍然会自动推算得到长度
		2、静态初始化的标准格式可以拆分为两步骤
		3、动态初始化也可以拆分为两步骤
	***	4、静态初始化一旦使用省略格式，就不能拆分为两步骤了
		
		//是错误的
		例如：int arrayTest[];
			  arrayTest = {1,2,3};
	
	3、使用建议：
		如果不确定数组当中的具体内容，用动态初始化;否则已经确定了具体的内容的，用静态初始化；
5、访问数组元素进行获取
	1、直接打印数组名称，得到的是数组对应的，内存地址哈希值。[I@75412c2f
		[		I			@75412c2f
	  数组	int类型			16进制
	2、访问数据元素的格式：数据名称[索引值]
		索引值：就是一个int数字，代表数组当中元素的编号
		【注意】：索引值从0开始，一直到“数组长度-1”为止
	3、使用方式
		1、可以直接打印数组中的元素
		2、也可以将数组当中的某一个单个元素，赋值给变量
6、访问数组元素进行赋值
	1、使用动态初始化的时候，其中的元素将会自动拥有一个默认值。规则如下：
		1、如果是整数类型：那么默认是0;
		2、如果是浮点数类型：那么默认是0.0;
		3、如果是字符类型：那么默认是'\u0000';
		4、如果是布尔类型：那么默认是false;
		5、如果是引用类型：那么默认是null;
	2、注意事项：
		静态初始化其实也有默认值的过程，只不过系统自动马上将默认值替换成为了大括号当中的具体数值
7、Java中的内存划分
	1、JAVA的内存需要划分成为5个部分
		1、栈(Stack):存放的都是方法中的局部变量。方法的运行一定要在栈中运行(方法的调用就是入栈和出栈的过程)
			1、局部变量:方法的参数,或者是方法{}内部的变量
			2、作用域:一定超出作用域，立刻从栈内存中消失
		2、堆(Heap)：凡是new出来的东西，都在堆当中
			1、堆内存里面的东西都有一个地址值：16进制
			2、堆内存里面的数据，都有默认值。规则：
				1、如果是整数类型：那么默认是0;
				2、如果是浮点数类型：那么默认是0.0;
				3、如果是字符类型：那么默认是'\u0000';
				4、如果是布尔类型：那么默认是false;
				5、如果是引用类型：那么默认是null;
		3、方法区(Method Area):包含.class相关信息，包含方法的信息
		4、本地方法栈(Native Method Stack)：与操作系统相关
		5、寄存器(PC Register)：与CPU相关
		
8、一个数组的内存图
9、两个数组的内存图
10、两个引用指向同一个数组的内存图
11、常见问题_数组索引越界异常
	1、如果访问数组元素的时候，索引编号并不存在，那么将会发生数组索引越界异常(ArraryIndexOutBoundsException);
12、常见问题_空指针异常
	1、所有的引用类型变量，都可以赋值为null值，但是代表其中什么都没有
	2、数组必须进行new初始化之后才能使用其中的元素。如果只是赋值了一个Null,没有进行new创建，那么将发生空指针异常(NullPointerException)
	3、原因：完了new
		解决：补上new
13、获取数组的长度
	1、获取数组长度的格式：数组名称.length			//这将得到一个int数字，代表数组的长度
***	2、数组一旦创建，程序运行期间，长度不可改变
14、数组的遍历输出
	1、遍历数组：说的是对数组当中的每一个元素进行逐一、挨个处理。默认处理方式是打印
	2、使用循环，次数就是数组长度
15、求出数组中的最值
16、数组元素反转(要求不能使用新数组，就用原来的唯一一个数组)
	1、数组元素的反转其实就是对称位置的元素交换
	2、需要两个索引代表对称位置
	3、交换数据(一般情况下使用第三个变量)
	4、停止交换的时机：min>=max    //故保持交换的条件是max>min
	
	
	
	初始化语句：int min = 0, int max = array.length - 1
	条件判断:min<max
	循环体：使用第三个变量交换数据
	步进语句：min++,max--
	
	
	for(int min = 0, int max = array.length - 1;min<max;min++,max--){
		int temp = array[min];
		array[min] = array[max];
		array[max] = temp;
	}
17、数组作为方法参数_传递地址值
	1、数组可以作为方法的参数，当调用方法的时候，向方法的小括号进行传参，传递进去的其实是数组的地址值
18、数组作为方法返回值_返回地址值
	1、一个方法可以有0个、1个、多个参数；但是只能有0个或1个返回值，不能有多个返回值
	2、如果希望一个方法中有多个结果数据进行返回，怎么办？
		解决方法：用一个数组作为返回类型
	3、任何数据类型都能作为方法的参数类型、或者返回值类型
	
	4、数组作为方法的参数，传递进去的其实是数组的地址值。
	4、数组作为方法的返回值，返回的其实是数组的地址值。